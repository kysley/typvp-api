# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Account {
  color: String
  confirmed: Boolean!
  createdAt: DateTime!
  email: String!
  id: String!
  lastPlayed: String
  lastSeen: DateTime!
  password: String!
  role: Role!
  tests(after: TestWhereUniqueInput, before: TestWhereUniqueInput, first: Int, last: Int, orderBy: TestOrderByInput, skip: Int, where: TestWhereInput): [Test!]
  trials(after: TrialWhereUniqueInput, before: TrialWhereUniqueInput, first: Int, last: Int, orderBy: TrialOrderByInput, skip: Int, where: TrialWhereInput): [Trial!]
  updatedAt: DateTime!
  username: String!
  usernameLowercase: String
}

input AccountCreateInput {
  color: String
  confirmed: Boolean
  createdAt: DateTime
  email: String!
  id: String
  lastPlayed: String
  lastSeen: DateTime
  password: String!
  role: Role
  tests: TestCreateManyWithoutAccountInput
  trials: TrialCreateManyWithoutOwnerInput
  updatedAt: DateTime
  username: String!
  usernameLowercase: String
}

input AccountCreateOneWithoutTestsInput {
  connect: AccountWhereUniqueInput
  create: AccountCreateWithoutTestsInput
}

input AccountCreateOneWithoutTrialsInput {
  connect: AccountWhereUniqueInput
  create: AccountCreateWithoutTrialsInput
}

input AccountCreateWithoutTestsInput {
  color: String
  confirmed: Boolean
  createdAt: DateTime
  email: String!
  id: String
  lastPlayed: String
  lastSeen: DateTime
  password: String!
  role: Role
  trials: TrialCreateManyWithoutOwnerInput
  updatedAt: DateTime
  username: String!
  usernameLowercase: String
}

input AccountCreateWithoutTrialsInput {
  color: String
  confirmed: Boolean
  createdAt: DateTime
  email: String!
  id: String
  lastPlayed: String
  lastSeen: DateTime
  password: String!
  role: Role
  tests: TestCreateManyWithoutAccountInput
  updatedAt: DateTime
  username: String!
  usernameLowercase: String
}

input AccountLoginInput {
  password: String!
  username: String!
}

input AccountUpdateInput {
  color: String
  confirmed: Boolean
  createdAt: DateTime
  email: String
  id: String
  lastPlayed: String
  lastSeen: DateTime
  password: String
  role: Role
  tests: TestUpdateManyWithoutAccountInput
  trials: TrialUpdateManyWithoutOwnerInput
  updatedAt: DateTime
  username: String
  usernameLowercase: String
}

input AccountUpdateOneRequiredWithoutTestsInput {
  connect: AccountWhereUniqueInput
  create: AccountCreateWithoutTestsInput
  update: AccountUpdateWithoutTestsDataInput
  upsert: AccountUpsertWithoutTestsInput
}

input AccountUpdateOneWithoutTrialsInput {
  connect: AccountWhereUniqueInput
  create: AccountCreateWithoutTrialsInput
  delete: Boolean
  disconnect: Boolean
  update: AccountUpdateWithoutTrialsDataInput
  upsert: AccountUpsertWithoutTrialsInput
}

input AccountUpdateWithoutTestsDataInput {
  color: String
  confirmed: Boolean
  createdAt: DateTime
  email: String
  id: String
  lastPlayed: String
  lastSeen: DateTime
  password: String
  role: Role
  trials: TrialUpdateManyWithoutOwnerInput
  updatedAt: DateTime
  username: String
  usernameLowercase: String
}

input AccountUpdateWithoutTrialsDataInput {
  color: String
  confirmed: Boolean
  createdAt: DateTime
  email: String
  id: String
  lastPlayed: String
  lastSeen: DateTime
  password: String
  role: Role
  tests: TestUpdateManyWithoutAccountInput
  updatedAt: DateTime
  username: String
  usernameLowercase: String
}

input AccountUpsertWithoutTestsInput {
  create: AccountCreateWithoutTestsInput!
  update: AccountUpdateWithoutTestsDataInput!
}

input AccountUpsertWithoutTrialsInput {
  create: AccountCreateWithoutTrialsInput!
  update: AccountUpdateWithoutTrialsDataInput!
}

input AccountWhereInput {
  AND: [AccountWhereInput!]
  color: NullableStringFilter
  confirmed: BooleanFilter
  createdAt: DateTimeFilter
  email: StringFilter
  id: StringFilter
  lastPlayed: NullableStringFilter
  lastSeen: DateTimeFilter
  NOT: [AccountWhereInput!]
  OR: [AccountWhereInput!]
  password: StringFilter
  role: RoleFilter
  tests: TestFilter
  trials: TrialFilter
  updatedAt: DateTimeFilter
  username: StringFilter
  usernameLowercase: NullableStringFilter
}

input AccountWhereUniqueInput {
  email: String
  id: String
  username: String
  usernameLowercase: String
}

type AuthPayload {
  account: Account!
  token: String!
}

input BooleanFilter {
  equals: Boolean
  not: Boolean
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

enum Difficulty {
  EASY
  HARD
  MEDIUM
  NORMAL
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

type Mutation {
  createAccount(data: AccountCreateInput!): AuthPayload!
  deleteTrial(trialId: ID!): Trial!
  login(test: AccountLoginInput!): AuthPayload!
  seen: Boolean
  updateAccount(data: AccountUpdateInput!, where: AccountWhereUniqueInput!): Account!
  updateTrial(data: TrialUpdateInput!, where: TrialWhereUniqueInput!): Trial!
}

input NullableBooleanFilter {
  equals: Boolean
  not: Boolean
}

input NullableDifficultyFilter {
  equals: Difficulty
  in: [Difficulty!]
  not: Difficulty
  notIn: [Difficulty!]
}

input NullableIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

input NullableStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

enum OrderByArg {
  asc
  desc
}

type Query {
  account(where: AccountWhereUniqueInput!): Account
  me(where: AccountWhereUniqueInput!): Account
  trial(where: TrialWhereUniqueInput!): Trial
  trialLeaders(trialId: ID!): [Test!]!
  trials(after: TrialWhereUniqueInput, before: TrialWhereUniqueInput, first: Int, last: Int, orderBy: TrialOrderByInput, skip: Int, where: TrialWhereInput): [Trial!]!
}

enum ResultType {
  RACE
  SINGLEPLAYER
  TRIAL
}

input ResultTypeFilter {
  equals: ResultType
  in: [ResultType!]
  not: ResultType
  notIn: [ResultType!]
}

enum Role {
  ADMIN
  BETA
  PRO
  USER
}

input RoleFilter {
  equals: Role
  in: [Role!]
  not: Role
  notIn: [Role!]
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type Test {
  account: Account!
  accountId: String!
  correct: Int!
  corrections: Int!
  cpm: Int!
  createdAt: DateTime!
  id: String!
  incorrect: Int!
  rawCpm: Int!
  trial: Trial
  trialId: String
  type: ResultType!
  updatedAt: DateTime!
  wordIndex: Int!
  wpm: Int!
}

input TestCreateManyWithoutAccountInput {
  connect: [TestWhereUniqueInput!]
  create: [TestCreateWithoutAccountInput!]
}

input TestCreateManyWithoutTrialInput {
  connect: [TestWhereUniqueInput!]
  create: [TestCreateWithoutTrialInput!]
}

input TestCreateWithoutAccountInput {
  correct: Int!
  corrections: Int!
  cpm: Int!
  createdAt: DateTime
  id: String
  incorrect: Int!
  rawCpm: Int!
  trial: TrialCreateOneWithoutResultsInput
  type: ResultType!
  updatedAt: DateTime
  wordIndex: Int!
  wpm: Int!
}

input TestCreateWithoutTrialInput {
  account: AccountCreateOneWithoutTestsInput!
  correct: Int!
  corrections: Int!
  cpm: Int!
  createdAt: DateTime
  id: String
  incorrect: Int!
  rawCpm: Int!
  type: ResultType!
  updatedAt: DateTime
  wordIndex: Int!
  wpm: Int!
}

input TestFilter {
  every: TestWhereInput
  none: TestWhereInput
  some: TestWhereInput
}

input TestOrderByInput {
  account: OrderByArg
  accountId: OrderByArg
  correct: OrderByArg
  corrections: OrderByArg
  cpm: OrderByArg
  createdAt: OrderByArg
  id: OrderByArg
  incorrect: OrderByArg
  rawCpm: OrderByArg
  trial: OrderByArg
  trialId: OrderByArg
  type: OrderByArg
  updatedAt: OrderByArg
  wordIndex: OrderByArg
  wpm: OrderByArg
}

input TestScalarWhereInput {
  accountId: StringFilter
  AND: [TestScalarWhereInput!]
  correct: IntFilter
  corrections: IntFilter
  cpm: IntFilter
  createdAt: DateTimeFilter
  id: StringFilter
  incorrect: IntFilter
  NOT: [TestScalarWhereInput!]
  OR: [TestScalarWhereInput!]
  rawCpm: IntFilter
  trialId: NullableStringFilter
  type: ResultTypeFilter
  updatedAt: DateTimeFilter
  wordIndex: IntFilter
  wpm: IntFilter
}

input TestUpdateManyDataInput {
  correct: Int
  corrections: Int
  cpm: Int
  createdAt: DateTime
  id: String
  incorrect: Int
  rawCpm: Int
  type: ResultType
  updatedAt: DateTime
  wordIndex: Int
  wpm: Int
}

input TestUpdateManyWithoutAccountInput {
  connect: [TestWhereUniqueInput!]
  create: [TestCreateWithoutAccountInput!]
  delete: [TestWhereUniqueInput!]
  deleteMany: [TestScalarWhereInput!]
  disconnect: [TestWhereUniqueInput!]
  set: [TestWhereUniqueInput!]
  update: [TestUpdateWithWhereUniqueWithoutAccountInput!]
  updateMany: [TestUpdateManyWithWhereNestedInput!]
  upsert: [TestUpsertWithWhereUniqueWithoutAccountInput!]
}

input TestUpdateManyWithoutTrialInput {
  connect: [TestWhereUniqueInput!]
  create: [TestCreateWithoutTrialInput!]
  delete: [TestWhereUniqueInput!]
  deleteMany: [TestScalarWhereInput!]
  disconnect: [TestWhereUniqueInput!]
  set: [TestWhereUniqueInput!]
  update: [TestUpdateWithWhereUniqueWithoutTrialInput!]
  updateMany: [TestUpdateManyWithWhereNestedInput!]
  upsert: [TestUpsertWithWhereUniqueWithoutTrialInput!]
}

input TestUpdateManyWithWhereNestedInput {
  data: TestUpdateManyDataInput!
  where: TestScalarWhereInput!
}

input TestUpdateWithoutAccountDataInput {
  correct: Int
  corrections: Int
  cpm: Int
  createdAt: DateTime
  id: String
  incorrect: Int
  rawCpm: Int
  trial: TrialUpdateOneWithoutResultsInput
  type: ResultType
  updatedAt: DateTime
  wordIndex: Int
  wpm: Int
}

input TestUpdateWithoutTrialDataInput {
  account: AccountUpdateOneRequiredWithoutTestsInput
  correct: Int
  corrections: Int
  cpm: Int
  createdAt: DateTime
  id: String
  incorrect: Int
  rawCpm: Int
  type: ResultType
  updatedAt: DateTime
  wordIndex: Int
  wpm: Int
}

input TestUpdateWithWhereUniqueWithoutAccountInput {
  data: TestUpdateWithoutAccountDataInput!
  where: TestWhereUniqueInput!
}

input TestUpdateWithWhereUniqueWithoutTrialInput {
  data: TestUpdateWithoutTrialDataInput!
  where: TestWhereUniqueInput!
}

input TestUpsertWithWhereUniqueWithoutAccountInput {
  create: TestCreateWithoutAccountInput!
  update: TestUpdateWithoutAccountDataInput!
  where: TestWhereUniqueInput!
}

input TestUpsertWithWhereUniqueWithoutTrialInput {
  create: TestCreateWithoutTrialInput!
  update: TestUpdateWithoutTrialDataInput!
  where: TestWhereUniqueInput!
}

input TestWhereInput {
  account: AccountWhereInput
  accountId: StringFilter
  AND: [TestWhereInput!]
  correct: IntFilter
  corrections: IntFilter
  cpm: IntFilter
  createdAt: DateTimeFilter
  id: StringFilter
  incorrect: IntFilter
  NOT: [TestWhereInput!]
  OR: [TestWhereInput!]
  rawCpm: IntFilter
  trial: TrialWhereInput
  trialId: NullableStringFilter
  type: ResultTypeFilter
  updatedAt: DateTimeFilter
  wordIndex: IntFilter
  wpm: IntFilter
}

input TestWhereUniqueInput {
  id: String
}

type Trial {
  createdAt: DateTime!
  custom: Boolean
  difficulty: Difficulty
  id: String!
  maxWordLength: Int
  minWordLength: Int
  name: String!
  owner: Account
  ownerId: String
  private: Boolean
  results(after: TestWhereUniqueInput, before: TestWhereUniqueInput, first: Int, last: Int, orderBy: TestOrderByInput, skip: Int, where: TestWhereInput): [Test!]
  updatedAt: DateTime!
  wordSet: String!
}

input TrialCreateManyWithoutOwnerInput {
  connect: [TrialWhereUniqueInput!]
  create: [TrialCreateWithoutOwnerInput!]
}

input TrialCreateOneWithoutResultsInput {
  connect: TrialWhereUniqueInput
  create: TrialCreateWithoutResultsInput
}

input TrialCreateWithoutOwnerInput {
  createdAt: DateTime
  custom: Boolean
  difficulty: Difficulty
  id: String
  maxWordLength: Int
  minWordLength: Int
  name: String!
  private: Boolean
  results: TestCreateManyWithoutTrialInput
  updatedAt: DateTime
  wordSet: String!
}

input TrialCreateWithoutResultsInput {
  createdAt: DateTime
  custom: Boolean
  difficulty: Difficulty
  id: String
  maxWordLength: Int
  minWordLength: Int
  name: String!
  owner: AccountCreateOneWithoutTrialsInput
  private: Boolean
  updatedAt: DateTime
  wordSet: String!
}

input TrialFilter {
  every: TrialWhereInput
  none: TrialWhereInput
  some: TrialWhereInput
}

input TrialOrderByInput {
  createdAt: OrderByArg
  custom: OrderByArg
  difficulty: OrderByArg
  id: OrderByArg
  maxWordLength: OrderByArg
  minWordLength: OrderByArg
  name: OrderByArg
  owner: OrderByArg
  ownerId: OrderByArg
  private: OrderByArg
  updatedAt: OrderByArg
  wordSet: OrderByArg
}

input TrialScalarWhereInput {
  AND: [TrialScalarWhereInput!]
  createdAt: DateTimeFilter
  custom: NullableBooleanFilter
  difficulty: NullableDifficultyFilter
  id: StringFilter
  maxWordLength: NullableIntFilter
  minWordLength: NullableIntFilter
  name: StringFilter
  NOT: [TrialScalarWhereInput!]
  OR: [TrialScalarWhereInput!]
  ownerId: NullableStringFilter
  private: NullableBooleanFilter
  results: TestFilter
  updatedAt: DateTimeFilter
  wordSet: StringFilter
}

input TrialUpdateInput {
  createdAt: DateTime
  custom: Boolean
  difficulty: Difficulty
  id: String
  maxWordLength: Int
  minWordLength: Int
  name: String
  owner: AccountUpdateOneWithoutTrialsInput
  private: Boolean
  results: TestUpdateManyWithoutTrialInput
  updatedAt: DateTime
  wordSet: String
}

input TrialUpdateManyDataInput {
  createdAt: DateTime
  custom: Boolean
  difficulty: Difficulty
  id: String
  maxWordLength: Int
  minWordLength: Int
  name: String
  private: Boolean
  updatedAt: DateTime
  wordSet: String
}

input TrialUpdateManyWithoutOwnerInput {
  connect: [TrialWhereUniqueInput!]
  create: [TrialCreateWithoutOwnerInput!]
  delete: [TrialWhereUniqueInput!]
  deleteMany: [TrialScalarWhereInput!]
  disconnect: [TrialWhereUniqueInput!]
  set: [TrialWhereUniqueInput!]
  update: [TrialUpdateWithWhereUniqueWithoutOwnerInput!]
  updateMany: [TrialUpdateManyWithWhereNestedInput!]
  upsert: [TrialUpsertWithWhereUniqueWithoutOwnerInput!]
}

input TrialUpdateManyWithWhereNestedInput {
  data: TrialUpdateManyDataInput!
  where: TrialScalarWhereInput!
}

input TrialUpdateOneWithoutResultsInput {
  connect: TrialWhereUniqueInput
  create: TrialCreateWithoutResultsInput
  delete: Boolean
  disconnect: Boolean
  update: TrialUpdateWithoutResultsDataInput
  upsert: TrialUpsertWithoutResultsInput
}

input TrialUpdateWithoutOwnerDataInput {
  createdAt: DateTime
  custom: Boolean
  difficulty: Difficulty
  id: String
  maxWordLength: Int
  minWordLength: Int
  name: String
  private: Boolean
  results: TestUpdateManyWithoutTrialInput
  updatedAt: DateTime
  wordSet: String
}

input TrialUpdateWithoutResultsDataInput {
  createdAt: DateTime
  custom: Boolean
  difficulty: Difficulty
  id: String
  maxWordLength: Int
  minWordLength: Int
  name: String
  owner: AccountUpdateOneWithoutTrialsInput
  private: Boolean
  updatedAt: DateTime
  wordSet: String
}

input TrialUpdateWithWhereUniqueWithoutOwnerInput {
  data: TrialUpdateWithoutOwnerDataInput!
  where: TrialWhereUniqueInput!
}

input TrialUpsertWithoutResultsInput {
  create: TrialCreateWithoutResultsInput!
  update: TrialUpdateWithoutResultsDataInput!
}

input TrialUpsertWithWhereUniqueWithoutOwnerInput {
  create: TrialCreateWithoutOwnerInput!
  update: TrialUpdateWithoutOwnerDataInput!
  where: TrialWhereUniqueInput!
}

input TrialWhereInput {
  AND: [TrialWhereInput!]
  createdAt: DateTimeFilter
  custom: NullableBooleanFilter
  difficulty: NullableDifficultyFilter
  id: StringFilter
  maxWordLength: NullableIntFilter
  minWordLength: NullableIntFilter
  name: StringFilter
  NOT: [TrialWhereInput!]
  OR: [TrialWhereInput!]
  owner: AccountWhereInput
  ownerId: NullableStringFilter
  private: NullableBooleanFilter
  results: TestFilter
  updatedAt: DateTimeFilter
  wordSet: StringFilter
}

input TrialWhereUniqueInput {
  id: String
}
