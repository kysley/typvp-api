# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Account {
  color: String
  confirmed: Boolean!
  createdAt: DateTime!
  email: String!
  id: String!
  lastPlayed: ResultType
  lastSeen: DateTime!
  password: String!
  role: Role!
  updatedAt: DateTime!
  username: String!
  usernameLowercase: String
  tests(where: TestWhereInput, orderBy: TestOrderByInput, skip: Int, after: TestWhereUniqueInput, before: TestWhereUniqueInput, first: Int, last: Int): [Test!]
  trials(where: TrialWhereInput, orderBy: TrialOrderByInput, skip: Int, after: TrialWhereUniqueInput, before: TrialWhereUniqueInput, first: Int, last: Int): [Trial!]
}

input AccountLoginInput {
  username: String!
  password: String!
}

input AccountSignupInput {
  email: String!
  password: String!
  username: String!
}

input AccountWhereInput {
  color: NullableStringFilter
  confirmed: BooleanFilter
  createdAt: DateTimeFilter
  email: StringFilter
  id: StringFilter
  lastPlayed: NullableResultTypeFilter
  lastSeen: DateTimeFilter
  password: StringFilter
  role: RoleFilter
  updatedAt: DateTimeFilter
  username: StringFilter
  usernameLowercase: NullableStringFilter
  tests: TestFilter
  trials: TrialFilter
  AND: [AccountWhereInput!]
  OR: [AccountWhereInput!]
  NOT: [AccountWhereInput!]
}

input AccountWhereUniqueInput {
  email: String
  id: String
  username: String
  usernameLowercase: String
}

type AuthPayload {
  token: String!
  account: Account!
}

input BooleanFilter {
  equals: Boolean
  not: Boolean
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  not: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
}

enum Difficulty {
  EASY
  NORMAL
  MEDIUM
  HARD
}

input ExclusiveAccountCreateInput {
  email: String!
  password: String!
  username: String!
}

input ExclusiveAccountUpdateInput {
  color: String
  email: String
}

input ExclusiveCreateOneTestInput {
  correct: Int!
  corrections: Int!
  cpm: Int!
  incorrect: Int!
  rawCpm: Int!
  wordIndex: Int!
  wpm: Int!
}

input ExclusiveUpdateOneTrialInput {
  wordSet: String
  name: String
  private: Boolean
}

input IntFilter {
  equals: Int
  not: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
}

type Mutation {
  updateAccount(data: ExclusiveAccountUpdateInput!): Account!
  createAccount(data: ExclusiveAccountCreateInput!): AuthPayload!
  login(test: AccountLoginInput!): AuthPayload!
  createPersonalWordset(wordSet: String!): Boolean!
  updateTrial(data: ExclusiveUpdateOneTrialInput!, where: TrialWhereUniqueInput!): Trial!
  deleteTrial(trialId: ID!): Trial!
  createNewResult(data: ExclusiveCreateOneTestInput!): Boolean!
  getWordset: String!
}

input NullableBooleanFilter {
  equals: Boolean
  not: Boolean
}

input NullableDifficultyFilter {
  equals: Difficulty
  not: Difficulty
  in: [Difficulty!]
  notIn: [Difficulty!]
}

input NullableIntFilter {
  equals: Int
  not: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
}

input NullableResultTypeFilter {
  equals: ResultType
  not: ResultType
  in: [ResultType!]
  notIn: [ResultType!]
}

input NullableStringFilter {
  equals: String
  not: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
}

enum OrderByArg {
  asc
  desc
}

type Query {
  account(where: AccountWhereUniqueInput!): Account
  me(where: AccountWhereUniqueInput!): Account
  trialLeaders(trialId: ID!): [Test!]!
  leaderboard(where: TestWhereInput, orderBy: TestOrderByInput, skip: Int, after: TestWhereUniqueInput, before: TestWhereUniqueInput, first: Int, last: Int): [Test!]!
  trial(where: TrialWhereUniqueInput!): Trial
  trials(where: TrialWhereInput, orderBy: TrialOrderByInput, skip: Int, after: TrialWhereUniqueInput, before: TrialWhereUniqueInput, first: Int, last: Int): [Trial!]!
}

enum ResultType {
  SINGLEPLAYER
  RACE
  TRIAL
}

input ResultTypeFilter {
  equals: ResultType
  not: ResultType
  in: [ResultType!]
  notIn: [ResultType!]
}

enum Role {
  USER
  ADMIN
  PRO
  BETA
}

input RoleFilter {
  equals: Role
  not: Role
  in: [Role!]
  notIn: [Role!]
}

input StringFilter {
  equals: String
  not: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
}

type Test {
  correct: Int!
  corrections: Int!
  cpm: Int!
  createdAt: DateTime!
  id: String!
  incorrect: Int!
  rawCpm: Int!
  type: ResultType!
  updatedAt: DateTime!
  wordIndex: Int!
  wpm: Int!
  trialId: String
  accountId: String!
  trial: Trial
  account: Account!
}

input TestFilter {
  every: TestWhereInput
  some: TestWhereInput
  none: TestWhereInput
}

input TestOrderByInput {
  correct: OrderByArg
  corrections: OrderByArg
  cpm: OrderByArg
  createdAt: OrderByArg
  id: OrderByArg
  incorrect: OrderByArg
  rawCpm: OrderByArg
  type: OrderByArg
  updatedAt: OrderByArg
  wordIndex: OrderByArg
  wpm: OrderByArg
  trial: OrderByArg
  trialId: OrderByArg
  account: OrderByArg
  accountId: OrderByArg
}

input TestWhereInput {
  correct: IntFilter
  corrections: IntFilter
  cpm: IntFilter
  createdAt: DateTimeFilter
  id: StringFilter
  incorrect: IntFilter
  rawCpm: IntFilter
  type: ResultTypeFilter
  updatedAt: DateTimeFilter
  wordIndex: IntFilter
  wpm: IntFilter
  trialId: NullableStringFilter
  accountId: StringFilter
  AND: [TestWhereInput!]
  OR: [TestWhereInput!]
  NOT: [TestWhereInput!]
  trial: TrialWhereInput
  account: AccountWhereInput
}

input TestWhereUniqueInput {
  id: String
}

type Trial {
  createdAt: DateTime!
  custom: Boolean
  difficulty: Difficulty
  id: String!
  maxWordLength: Int
  minWordLength: Int
  name: String!
  private: Boolean
  updatedAt: DateTime!
  wordSet: String!
  ownerId: String
  results(where: TestWhereInput, orderBy: TestOrderByInput, skip: Int, after: TestWhereUniqueInput, before: TestWhereUniqueInput, first: Int, last: Int): [Test!]
  owner: Account
}

input TrialFilter {
  every: TrialWhereInput
  some: TrialWhereInput
  none: TrialWhereInput
}

input TrialOrderByInput {
  createdAt: OrderByArg
  custom: OrderByArg
  difficulty: OrderByArg
  id: OrderByArg
  maxWordLength: OrderByArg
  minWordLength: OrderByArg
  name: OrderByArg
  private: OrderByArg
  updatedAt: OrderByArg
  wordSet: OrderByArg
  owner: OrderByArg
  ownerId: OrderByArg
}

input TrialWhereInput {
  createdAt: DateTimeFilter
  custom: NullableBooleanFilter
  difficulty: NullableDifficultyFilter
  id: StringFilter
  maxWordLength: NullableIntFilter
  minWordLength: NullableIntFilter
  name: StringFilter
  private: NullableBooleanFilter
  updatedAt: DateTimeFilter
  wordSet: StringFilter
  results: TestFilter
  ownerId: NullableStringFilter
  AND: [TrialWhereInput!]
  OR: [TrialWhereInput!]
  NOT: [TrialWhereInput!]
  owner: AccountWhereInput
}

input TrialWhereUniqueInput {
  id: String
}
