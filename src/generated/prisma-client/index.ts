// Code generated by Prisma (prisma@1.34.3). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  account: (where?: AccountWhereInput) => Promise<boolean>;
  race: (where?: RaceWhereInput) => Promise<boolean>;
  room: (where?: RoomWhereInput) => Promise<boolean>;
  test: (where?: TestWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  account: (where: AccountWhereUniqueInput) => AccountNullablePromise;
  accounts: (args?: {
    where?: AccountWhereInput;
    orderBy?: AccountOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Account>;
  accountsConnection: (args?: {
    where?: AccountWhereInput;
    orderBy?: AccountOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AccountConnectionPromise;
  race: (where: RaceWhereUniqueInput) => RaceNullablePromise;
  races: (args?: {
    where?: RaceWhereInput;
    orderBy?: RaceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Race>;
  racesConnection: (args?: {
    where?: RaceWhereInput;
    orderBy?: RaceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => RaceConnectionPromise;
  room: (where: RoomWhereUniqueInput) => RoomNullablePromise;
  rooms: (args?: {
    where?: RoomWhereInput;
    orderBy?: RoomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Room>;
  roomsConnection: (args?: {
    where?: RoomWhereInput;
    orderBy?: RoomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => RoomConnectionPromise;
  test: (where: TestWhereUniqueInput) => TestNullablePromise;
  tests: (args?: {
    where?: TestWhereInput;
    orderBy?: TestOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Test>;
  testsConnection: (args?: {
    where?: TestWhereInput;
    orderBy?: TestOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TestConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAccount: (data: AccountCreateInput) => AccountPromise;
  updateAccount: (args: {
    data: AccountUpdateInput;
    where: AccountWhereUniqueInput;
  }) => AccountPromise;
  updateManyAccounts: (args: {
    data: AccountUpdateManyMutationInput;
    where?: AccountWhereInput;
  }) => BatchPayloadPromise;
  upsertAccount: (args: {
    where: AccountWhereUniqueInput;
    create: AccountCreateInput;
    update: AccountUpdateInput;
  }) => AccountPromise;
  deleteAccount: (where: AccountWhereUniqueInput) => AccountPromise;
  deleteManyAccounts: (where?: AccountWhereInput) => BatchPayloadPromise;
  createRace: (data: RaceCreateInput) => RacePromise;
  updateRace: (args: {
    data: RaceUpdateInput;
    where: RaceWhereUniqueInput;
  }) => RacePromise;
  updateManyRaces: (args: {
    data: RaceUpdateManyMutationInput;
    where?: RaceWhereInput;
  }) => BatchPayloadPromise;
  upsertRace: (args: {
    where: RaceWhereUniqueInput;
    create: RaceCreateInput;
    update: RaceUpdateInput;
  }) => RacePromise;
  deleteRace: (where: RaceWhereUniqueInput) => RacePromise;
  deleteManyRaces: (where?: RaceWhereInput) => BatchPayloadPromise;
  createRoom: (data: RoomCreateInput) => RoomPromise;
  updateRoom: (args: {
    data: RoomUpdateInput;
    where: RoomWhereUniqueInput;
  }) => RoomPromise;
  updateManyRooms: (args: {
    data: RoomUpdateManyMutationInput;
    where?: RoomWhereInput;
  }) => BatchPayloadPromise;
  upsertRoom: (args: {
    where: RoomWhereUniqueInput;
    create: RoomCreateInput;
    update: RoomUpdateInput;
  }) => RoomPromise;
  deleteRoom: (where: RoomWhereUniqueInput) => RoomPromise;
  deleteManyRooms: (where?: RoomWhereInput) => BatchPayloadPromise;
  createTest: (data: TestCreateInput) => TestPromise;
  updateTest: (args: {
    data: TestUpdateInput;
    where: TestWhereUniqueInput;
  }) => TestPromise;
  updateManyTests: (args: {
    data: TestUpdateManyMutationInput;
    where?: TestWhereInput;
  }) => BatchPayloadPromise;
  upsertTest: (args: {
    where: TestWhereUniqueInput;
    create: TestCreateInput;
    update: TestUpdateInput;
  }) => TestPromise;
  deleteTest: (where: TestWhereUniqueInput) => TestPromise;
  deleteManyTests: (where?: TestWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  account: (
    where?: AccountSubscriptionWhereInput
  ) => AccountSubscriptionPayloadSubscription;
  race: (
    where?: RaceSubscriptionWhereInput
  ) => RaceSubscriptionPayloadSubscription;
  room: (
    where?: RoomSubscriptionWhereInput
  ) => RoomSubscriptionPayloadSubscription;
  test: (
    where?: TestSubscriptionWhereInput
  ) => TestSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type TestOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "cpm_ASC"
  | "cpm_DESC"
  | "rawCpm_ASC"
  | "rawCpm_DESC"
  | "wpm_ASC"
  | "wpm_DESC"
  | "correct_ASC"
  | "correct_DESC"
  | "incorrect_ASC"
  | "incorrect_DESC"
  | "corrections_ASC"
  | "corrections_DESC";

export type Role = "USER" | "ADMIN";

export type AccountOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "email_ASC"
  | "email_DESC"
  | "username_ASC"
  | "username_DESC"
  | "password_ASC"
  | "password_DESC"
  | "role_ASC"
  | "role_DESC";

export type RaceState = "IN_PROGRESS" | "AWAITING" | "COUNTDOWN" | "FINISHED";

export type RoomState = "IDLE" | "FULL" | "AWAITING" | "BUSY";

export type RaceOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "raceState_ASC"
  | "raceState_DESC"
  | "wordSet_ASC"
  | "wordSet_DESC";

export type RoomOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "roomState_ASC"
  | "roomState_DESC"
  | "roomHost_ASC"
  | "roomHost_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface TestUpdateManyDataInput {
  cpm?: Maybe<Int>;
  rawCpm?: Maybe<Int>;
  wpm?: Maybe<Int>;
  correct?: Maybe<Int>;
  incorrect?: Maybe<Int>;
  corrections?: Maybe<Int>;
}

export type AccountWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
  username?: Maybe<String>;
}>;

export interface AccountCreateInput {
  id?: Maybe<ID_Input>;
  email: String;
  username: String;
  password: String;
  results?: Maybe<TestCreateManyWithoutAccountInput>;
  role: Role;
}

export interface RoomUpdateWithoutRaceDataInput {
  roomState?: Maybe<RoomState>;
  roomHost?: Maybe<ID_Input>;
}

export interface TestCreateManyWithoutAccountInput {
  create?: Maybe<
    TestCreateWithoutAccountInput[] | TestCreateWithoutAccountInput
  >;
  connect?: Maybe<TestWhereUniqueInput[] | TestWhereUniqueInput>;
}

export interface AccountCreateManyInput {
  create?: Maybe<AccountCreateInput[] | AccountCreateInput>;
  connect?: Maybe<AccountWhereUniqueInput[] | AccountWhereUniqueInput>;
}

export interface TestCreateWithoutAccountInput {
  id?: Maybe<ID_Input>;
  cpm: Int;
  rawCpm: Int;
  wpm: Int;
  correct: Int;
  incorrect: Int;
  corrections: Int;
}

export interface RoomSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<RoomWhereInput>;
  AND?: Maybe<RoomSubscriptionWhereInput[] | RoomSubscriptionWhereInput>;
  OR?: Maybe<RoomSubscriptionWhereInput[] | RoomSubscriptionWhereInput>;
  NOT?: Maybe<RoomSubscriptionWhereInput[] | RoomSubscriptionWhereInput>;
}

export interface AccountUpdateInput {
  email?: Maybe<String>;
  username?: Maybe<String>;
  password?: Maybe<String>;
  results?: Maybe<TestUpdateManyWithoutAccountInput>;
  role?: Maybe<Role>;
}

export interface AccountSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AccountWhereInput>;
  AND?: Maybe<AccountSubscriptionWhereInput[] | AccountSubscriptionWhereInput>;
  OR?: Maybe<AccountSubscriptionWhereInput[] | AccountSubscriptionWhereInput>;
  NOT?: Maybe<AccountSubscriptionWhereInput[] | AccountSubscriptionWhereInput>;
}

export interface TestUpdateManyWithoutAccountInput {
  create?: Maybe<
    TestCreateWithoutAccountInput[] | TestCreateWithoutAccountInput
  >;
  delete?: Maybe<TestWhereUniqueInput[] | TestWhereUniqueInput>;
  connect?: Maybe<TestWhereUniqueInput[] | TestWhereUniqueInput>;
  set?: Maybe<TestWhereUniqueInput[] | TestWhereUniqueInput>;
  disconnect?: Maybe<TestWhereUniqueInput[] | TestWhereUniqueInput>;
  update?: Maybe<
    | TestUpdateWithWhereUniqueWithoutAccountInput[]
    | TestUpdateWithWhereUniqueWithoutAccountInput
  >;
  upsert?: Maybe<
    | TestUpsertWithWhereUniqueWithoutAccountInput[]
    | TestUpsertWithWhereUniqueWithoutAccountInput
  >;
  deleteMany?: Maybe<TestScalarWhereInput[] | TestScalarWhereInput>;
  updateMany?: Maybe<
    TestUpdateManyWithWhereNestedInput[] | TestUpdateManyWithWhereNestedInput
  >;
}

export type RaceWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface TestUpdateWithWhereUniqueWithoutAccountInput {
  where: TestWhereUniqueInput;
  data: TestUpdateWithoutAccountDataInput;
}

export interface AccountUpdateWithoutResultsDataInput {
  email?: Maybe<String>;
  username?: Maybe<String>;
  password?: Maybe<String>;
  role?: Maybe<Role>;
}

export interface TestUpdateWithoutAccountDataInput {
  cpm?: Maybe<Int>;
  rawCpm?: Maybe<Int>;
  wpm?: Maybe<Int>;
  correct?: Maybe<Int>;
  incorrect?: Maybe<Int>;
  corrections?: Maybe<Int>;
}

export interface TestWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  cpm?: Maybe<Int>;
  cpm_not?: Maybe<Int>;
  cpm_in?: Maybe<Int[] | Int>;
  cpm_not_in?: Maybe<Int[] | Int>;
  cpm_lt?: Maybe<Int>;
  cpm_lte?: Maybe<Int>;
  cpm_gt?: Maybe<Int>;
  cpm_gte?: Maybe<Int>;
  rawCpm?: Maybe<Int>;
  rawCpm_not?: Maybe<Int>;
  rawCpm_in?: Maybe<Int[] | Int>;
  rawCpm_not_in?: Maybe<Int[] | Int>;
  rawCpm_lt?: Maybe<Int>;
  rawCpm_lte?: Maybe<Int>;
  rawCpm_gt?: Maybe<Int>;
  rawCpm_gte?: Maybe<Int>;
  wpm?: Maybe<Int>;
  wpm_not?: Maybe<Int>;
  wpm_in?: Maybe<Int[] | Int>;
  wpm_not_in?: Maybe<Int[] | Int>;
  wpm_lt?: Maybe<Int>;
  wpm_lte?: Maybe<Int>;
  wpm_gt?: Maybe<Int>;
  wpm_gte?: Maybe<Int>;
  correct?: Maybe<Int>;
  correct_not?: Maybe<Int>;
  correct_in?: Maybe<Int[] | Int>;
  correct_not_in?: Maybe<Int[] | Int>;
  correct_lt?: Maybe<Int>;
  correct_lte?: Maybe<Int>;
  correct_gt?: Maybe<Int>;
  correct_gte?: Maybe<Int>;
  incorrect?: Maybe<Int>;
  incorrect_not?: Maybe<Int>;
  incorrect_in?: Maybe<Int[] | Int>;
  incorrect_not_in?: Maybe<Int[] | Int>;
  incorrect_lt?: Maybe<Int>;
  incorrect_lte?: Maybe<Int>;
  incorrect_gt?: Maybe<Int>;
  incorrect_gte?: Maybe<Int>;
  corrections?: Maybe<Int>;
  corrections_not?: Maybe<Int>;
  corrections_in?: Maybe<Int[] | Int>;
  corrections_not_in?: Maybe<Int[] | Int>;
  corrections_lt?: Maybe<Int>;
  corrections_lte?: Maybe<Int>;
  corrections_gt?: Maybe<Int>;
  corrections_gte?: Maybe<Int>;
  account?: Maybe<AccountWhereInput>;
  AND?: Maybe<TestWhereInput[] | TestWhereInput>;
  OR?: Maybe<TestWhereInput[] | TestWhereInput>;
  NOT?: Maybe<TestWhereInput[] | TestWhereInput>;
}

export interface TestUpsertWithWhereUniqueWithoutAccountInput {
  where: TestWhereUniqueInput;
  update: TestUpdateWithoutAccountDataInput;
  create: TestCreateWithoutAccountInput;
}

export interface RoomWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  roomState?: Maybe<RoomState>;
  roomState_not?: Maybe<RoomState>;
  roomState_in?: Maybe<RoomState[] | RoomState>;
  roomState_not_in?: Maybe<RoomState[] | RoomState>;
  race?: Maybe<RaceWhereInput>;
  roomHost?: Maybe<ID_Input>;
  roomHost_not?: Maybe<ID_Input>;
  roomHost_in?: Maybe<ID_Input[] | ID_Input>;
  roomHost_not_in?: Maybe<ID_Input[] | ID_Input>;
  roomHost_lt?: Maybe<ID_Input>;
  roomHost_lte?: Maybe<ID_Input>;
  roomHost_gt?: Maybe<ID_Input>;
  roomHost_gte?: Maybe<ID_Input>;
  roomHost_contains?: Maybe<ID_Input>;
  roomHost_not_contains?: Maybe<ID_Input>;
  roomHost_starts_with?: Maybe<ID_Input>;
  roomHost_not_starts_with?: Maybe<ID_Input>;
  roomHost_ends_with?: Maybe<ID_Input>;
  roomHost_not_ends_with?: Maybe<ID_Input>;
  AND?: Maybe<RoomWhereInput[] | RoomWhereInput>;
  OR?: Maybe<RoomWhereInput[] | RoomWhereInput>;
  NOT?: Maybe<RoomWhereInput[] | RoomWhereInput>;
}

export interface TestScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  cpm?: Maybe<Int>;
  cpm_not?: Maybe<Int>;
  cpm_in?: Maybe<Int[] | Int>;
  cpm_not_in?: Maybe<Int[] | Int>;
  cpm_lt?: Maybe<Int>;
  cpm_lte?: Maybe<Int>;
  cpm_gt?: Maybe<Int>;
  cpm_gte?: Maybe<Int>;
  rawCpm?: Maybe<Int>;
  rawCpm_not?: Maybe<Int>;
  rawCpm_in?: Maybe<Int[] | Int>;
  rawCpm_not_in?: Maybe<Int[] | Int>;
  rawCpm_lt?: Maybe<Int>;
  rawCpm_lte?: Maybe<Int>;
  rawCpm_gt?: Maybe<Int>;
  rawCpm_gte?: Maybe<Int>;
  wpm?: Maybe<Int>;
  wpm_not?: Maybe<Int>;
  wpm_in?: Maybe<Int[] | Int>;
  wpm_not_in?: Maybe<Int[] | Int>;
  wpm_lt?: Maybe<Int>;
  wpm_lte?: Maybe<Int>;
  wpm_gt?: Maybe<Int>;
  wpm_gte?: Maybe<Int>;
  correct?: Maybe<Int>;
  correct_not?: Maybe<Int>;
  correct_in?: Maybe<Int[] | Int>;
  correct_not_in?: Maybe<Int[] | Int>;
  correct_lt?: Maybe<Int>;
  correct_lte?: Maybe<Int>;
  correct_gt?: Maybe<Int>;
  correct_gte?: Maybe<Int>;
  incorrect?: Maybe<Int>;
  incorrect_not?: Maybe<Int>;
  incorrect_in?: Maybe<Int[] | Int>;
  incorrect_not_in?: Maybe<Int[] | Int>;
  incorrect_lt?: Maybe<Int>;
  incorrect_lte?: Maybe<Int>;
  incorrect_gt?: Maybe<Int>;
  incorrect_gte?: Maybe<Int>;
  corrections?: Maybe<Int>;
  corrections_not?: Maybe<Int>;
  corrections_in?: Maybe<Int[] | Int>;
  corrections_not_in?: Maybe<Int[] | Int>;
  corrections_lt?: Maybe<Int>;
  corrections_lte?: Maybe<Int>;
  corrections_gt?: Maybe<Int>;
  corrections_gte?: Maybe<Int>;
  AND?: Maybe<TestScalarWhereInput[] | TestScalarWhereInput>;
  OR?: Maybe<TestScalarWhereInput[] | TestScalarWhereInput>;
  NOT?: Maybe<TestScalarWhereInput[] | TestScalarWhereInput>;
}

export interface AccountCreateWithoutResultsInput {
  id?: Maybe<ID_Input>;
  email: String;
  username: String;
  password: String;
  role: Role;
}

export interface TestUpdateManyWithWhereNestedInput {
  where: TestScalarWhereInput;
  data: TestUpdateManyDataInput;
}

export interface TestCreateInput {
  id?: Maybe<ID_Input>;
  cpm: Int;
  rawCpm: Int;
  wpm: Int;
  correct: Int;
  incorrect: Int;
  corrections: Int;
  account: AccountCreateOneWithoutResultsInput;
}

export interface RoomCreateInput {
  id?: Maybe<ID_Input>;
  roomState: RoomState;
  race: RaceCreateOneWithoutRoomInput;
  roomHost?: Maybe<ID_Input>;
}

export interface RoomUpdateManyMutationInput {
  roomState?: Maybe<RoomState>;
  roomHost?: Maybe<ID_Input>;
}

export interface AccountUpdateManyMutationInput {
  email?: Maybe<String>;
  username?: Maybe<String>;
  password?: Maybe<String>;
  role?: Maybe<Role>;
}

export interface RaceUpdateWithoutRoomDataInput {
  players?: Maybe<AccountUpdateManyInput>;
  raceState?: Maybe<RaceState>;
  wordSet?: Maybe<String>;
}

export interface RaceUpdateManyMutationInput {
  raceState?: Maybe<RaceState>;
  wordSet?: Maybe<String>;
}

export type TestWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface RoomUpsertWithoutRaceInput {
  update: RoomUpdateWithoutRaceDataInput;
  create: RoomCreateWithoutRaceInput;
}

export interface RaceCreateWithoutRoomInput {
  id?: Maybe<ID_Input>;
  players?: Maybe<AccountCreateManyInput>;
  raceState: RaceState;
  wordSet: String;
}

export interface RaceCreateInput {
  id?: Maybe<ID_Input>;
  players?: Maybe<AccountCreateManyInput>;
  raceState: RaceState;
  room: RoomCreateOneWithoutRaceInput;
  wordSet: String;
}

export interface RaceSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<RaceWhereInput>;
  AND?: Maybe<RaceSubscriptionWhereInput[] | RaceSubscriptionWhereInput>;
  OR?: Maybe<RaceSubscriptionWhereInput[] | RaceSubscriptionWhereInput>;
  NOT?: Maybe<RaceSubscriptionWhereInput[] | RaceSubscriptionWhereInput>;
}

export interface AccountWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  username?: Maybe<String>;
  username_not?: Maybe<String>;
  username_in?: Maybe<String[] | String>;
  username_not_in?: Maybe<String[] | String>;
  username_lt?: Maybe<String>;
  username_lte?: Maybe<String>;
  username_gt?: Maybe<String>;
  username_gte?: Maybe<String>;
  username_contains?: Maybe<String>;
  username_not_contains?: Maybe<String>;
  username_starts_with?: Maybe<String>;
  username_not_starts_with?: Maybe<String>;
  username_ends_with?: Maybe<String>;
  username_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  results_every?: Maybe<TestWhereInput>;
  results_some?: Maybe<TestWhereInput>;
  results_none?: Maybe<TestWhereInput>;
  role?: Maybe<Role>;
  role_not?: Maybe<Role>;
  role_in?: Maybe<Role[] | Role>;
  role_not_in?: Maybe<Role[] | Role>;
  AND?: Maybe<AccountWhereInput[] | AccountWhereInput>;
  OR?: Maybe<AccountWhereInput[] | AccountWhereInput>;
  NOT?: Maybe<AccountWhereInput[] | AccountWhereInput>;
}

export interface AccountUpsertWithoutResultsInput {
  update: AccountUpdateWithoutResultsDataInput;
  create: AccountCreateWithoutResultsInput;
}

export interface RoomCreateOneWithoutRaceInput {
  create?: Maybe<RoomCreateWithoutRaceInput>;
  connect?: Maybe<RoomWhereUniqueInput>;
}

export interface RaceWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  players_every?: Maybe<AccountWhereInput>;
  players_some?: Maybe<AccountWhereInput>;
  players_none?: Maybe<AccountWhereInput>;
  raceState?: Maybe<RaceState>;
  raceState_not?: Maybe<RaceState>;
  raceState_in?: Maybe<RaceState[] | RaceState>;
  raceState_not_in?: Maybe<RaceState[] | RaceState>;
  room?: Maybe<RoomWhereInput>;
  wordSet?: Maybe<String>;
  wordSet_not?: Maybe<String>;
  wordSet_in?: Maybe<String[] | String>;
  wordSet_not_in?: Maybe<String[] | String>;
  wordSet_lt?: Maybe<String>;
  wordSet_lte?: Maybe<String>;
  wordSet_gt?: Maybe<String>;
  wordSet_gte?: Maybe<String>;
  wordSet_contains?: Maybe<String>;
  wordSet_not_contains?: Maybe<String>;
  wordSet_starts_with?: Maybe<String>;
  wordSet_not_starts_with?: Maybe<String>;
  wordSet_ends_with?: Maybe<String>;
  wordSet_not_ends_with?: Maybe<String>;
  AND?: Maybe<RaceWhereInput[] | RaceWhereInput>;
  OR?: Maybe<RaceWhereInput[] | RaceWhereInput>;
  NOT?: Maybe<RaceWhereInput[] | RaceWhereInput>;
}

export interface RoomCreateWithoutRaceInput {
  id?: Maybe<ID_Input>;
  roomState: RoomState;
  roomHost?: Maybe<ID_Input>;
}

export interface AccountCreateOneWithoutResultsInput {
  create?: Maybe<AccountCreateWithoutResultsInput>;
  connect?: Maybe<AccountWhereUniqueInput>;
}

export interface RaceUpdateInput {
  players?: Maybe<AccountUpdateManyInput>;
  raceState?: Maybe<RaceState>;
  room?: Maybe<RoomUpdateOneRequiredWithoutRaceInput>;
  wordSet?: Maybe<String>;
}

export interface RaceUpsertWithoutRoomInput {
  update: RaceUpdateWithoutRoomDataInput;
  create: RaceCreateWithoutRoomInput;
}

export interface AccountUpdateManyInput {
  create?: Maybe<AccountCreateInput[] | AccountCreateInput>;
  update?: Maybe<
    | AccountUpdateWithWhereUniqueNestedInput[]
    | AccountUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | AccountUpsertWithWhereUniqueNestedInput[]
    | AccountUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<AccountWhereUniqueInput[] | AccountWhereUniqueInput>;
  connect?: Maybe<AccountWhereUniqueInput[] | AccountWhereUniqueInput>;
  set?: Maybe<AccountWhereUniqueInput[] | AccountWhereUniqueInput>;
  disconnect?: Maybe<AccountWhereUniqueInput[] | AccountWhereUniqueInput>;
  deleteMany?: Maybe<AccountScalarWhereInput[] | AccountScalarWhereInput>;
  updateMany?: Maybe<
    | AccountUpdateManyWithWhereNestedInput[]
    | AccountUpdateManyWithWhereNestedInput
  >;
}

export interface RoomUpdateInput {
  roomState?: Maybe<RoomState>;
  race?: Maybe<RaceUpdateOneRequiredWithoutRoomInput>;
  roomHost?: Maybe<ID_Input>;
}

export interface AccountUpdateWithWhereUniqueNestedInput {
  where: AccountWhereUniqueInput;
  data: AccountUpdateDataInput;
}

export interface TestSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TestWhereInput>;
  AND?: Maybe<TestSubscriptionWhereInput[] | TestSubscriptionWhereInput>;
  OR?: Maybe<TestSubscriptionWhereInput[] | TestSubscriptionWhereInput>;
  NOT?: Maybe<TestSubscriptionWhereInput[] | TestSubscriptionWhereInput>;
}

export interface AccountUpdateDataInput {
  email?: Maybe<String>;
  username?: Maybe<String>;
  password?: Maybe<String>;
  results?: Maybe<TestUpdateManyWithoutAccountInput>;
  role?: Maybe<Role>;
}

export interface AccountUpdateOneRequiredWithoutResultsInput {
  create?: Maybe<AccountCreateWithoutResultsInput>;
  update?: Maybe<AccountUpdateWithoutResultsDataInput>;
  upsert?: Maybe<AccountUpsertWithoutResultsInput>;
  connect?: Maybe<AccountWhereUniqueInput>;
}

export interface AccountUpsertWithWhereUniqueNestedInput {
  where: AccountWhereUniqueInput;
  update: AccountUpdateDataInput;
  create: AccountCreateInput;
}

export type RoomWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface RoomUpdateOneRequiredWithoutRaceInput {
  create?: Maybe<RoomCreateWithoutRaceInput>;
  update?: Maybe<RoomUpdateWithoutRaceDataInput>;
  upsert?: Maybe<RoomUpsertWithoutRaceInput>;
  connect?: Maybe<RoomWhereUniqueInput>;
}

export interface AccountUpdateManyDataInput {
  email?: Maybe<String>;
  username?: Maybe<String>;
  password?: Maybe<String>;
  role?: Maybe<Role>;
}

export interface AccountUpdateManyWithWhereNestedInput {
  where: AccountScalarWhereInput;
  data: AccountUpdateManyDataInput;
}

export interface AccountScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  username?: Maybe<String>;
  username_not?: Maybe<String>;
  username_in?: Maybe<String[] | String>;
  username_not_in?: Maybe<String[] | String>;
  username_lt?: Maybe<String>;
  username_lte?: Maybe<String>;
  username_gt?: Maybe<String>;
  username_gte?: Maybe<String>;
  username_contains?: Maybe<String>;
  username_not_contains?: Maybe<String>;
  username_starts_with?: Maybe<String>;
  username_not_starts_with?: Maybe<String>;
  username_ends_with?: Maybe<String>;
  username_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  role?: Maybe<Role>;
  role_not?: Maybe<Role>;
  role_in?: Maybe<Role[] | Role>;
  role_not_in?: Maybe<Role[] | Role>;
  AND?: Maybe<AccountScalarWhereInput[] | AccountScalarWhereInput>;
  OR?: Maybe<AccountScalarWhereInput[] | AccountScalarWhereInput>;
  NOT?: Maybe<AccountScalarWhereInput[] | AccountScalarWhereInput>;
}

export interface RaceUpdateOneRequiredWithoutRoomInput {
  create?: Maybe<RaceCreateWithoutRoomInput>;
  update?: Maybe<RaceUpdateWithoutRoomDataInput>;
  upsert?: Maybe<RaceUpsertWithoutRoomInput>;
  connect?: Maybe<RaceWhereUniqueInput>;
}

export interface TestUpdateInput {
  cpm?: Maybe<Int>;
  rawCpm?: Maybe<Int>;
  wpm?: Maybe<Int>;
  correct?: Maybe<Int>;
  incorrect?: Maybe<Int>;
  corrections?: Maybe<Int>;
  account?: Maybe<AccountUpdateOneRequiredWithoutResultsInput>;
}

export interface TestUpdateManyMutationInput {
  cpm?: Maybe<Int>;
  rawCpm?: Maybe<Int>;
  wpm?: Maybe<Int>;
  correct?: Maybe<Int>;
  incorrect?: Maybe<Int>;
  corrections?: Maybe<Int>;
}

export interface RaceCreateOneWithoutRoomInput {
  create?: Maybe<RaceCreateWithoutRoomInput>;
  connect?: Maybe<RaceWhereUniqueInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface TestPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  cpm: Int;
  rawCpm: Int;
  wpm: Int;
  correct: Int;
  incorrect: Int;
  corrections: Int;
}

export interface TestPreviousValuesPromise
  extends Promise<TestPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  cpm: () => Promise<Int>;
  rawCpm: () => Promise<Int>;
  wpm: () => Promise<Int>;
  correct: () => Promise<Int>;
  incorrect: () => Promise<Int>;
  corrections: () => Promise<Int>;
}

export interface TestPreviousValuesSubscription
  extends Promise<AsyncIterator<TestPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  cpm: () => Promise<AsyncIterator<Int>>;
  rawCpm: () => Promise<AsyncIterator<Int>>;
  wpm: () => Promise<AsyncIterator<Int>>;
  correct: () => Promise<AsyncIterator<Int>>;
  incorrect: () => Promise<AsyncIterator<Int>>;
  corrections: () => Promise<AsyncIterator<Int>>;
}

export interface AccountConnection {
  pageInfo: PageInfo;
  edges: AccountEdge[];
}

export interface AccountConnectionPromise
  extends Promise<AccountConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AccountEdge>>() => T;
  aggregate: <T = AggregateAccountPromise>() => T;
}

export interface AccountConnectionSubscription
  extends Promise<AsyncIterator<AccountConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AccountEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAccountSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface Room {
  id: ID_Output;
  createdAt?: DateTimeOutput;
  updatedAt?: DateTimeOutput;
  roomState: RoomState;
  roomHost?: ID_Output;
}

export interface RoomPromise extends Promise<Room>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  roomState: () => Promise<RoomState>;
  race: <T = RacePromise>() => T;
  roomHost: () => Promise<ID_Output>;
}

export interface RoomSubscription
  extends Promise<AsyncIterator<Room>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  roomState: () => Promise<AsyncIterator<RoomState>>;
  race: <T = RaceSubscription>() => T;
  roomHost: () => Promise<AsyncIterator<ID_Output>>;
}

export interface RoomNullablePromise
  extends Promise<Room | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  roomState: () => Promise<RoomState>;
  race: <T = RacePromise>() => T;
  roomHost: () => Promise<ID_Output>;
}

export interface Test {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  cpm: Int;
  rawCpm: Int;
  wpm: Int;
  correct: Int;
  incorrect: Int;
  corrections: Int;
}

export interface TestPromise extends Promise<Test>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  cpm: () => Promise<Int>;
  rawCpm: () => Promise<Int>;
  wpm: () => Promise<Int>;
  correct: () => Promise<Int>;
  incorrect: () => Promise<Int>;
  corrections: () => Promise<Int>;
  account: <T = AccountPromise>() => T;
}

export interface TestSubscription
  extends Promise<AsyncIterator<Test>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  cpm: () => Promise<AsyncIterator<Int>>;
  rawCpm: () => Promise<AsyncIterator<Int>>;
  wpm: () => Promise<AsyncIterator<Int>>;
  correct: () => Promise<AsyncIterator<Int>>;
  incorrect: () => Promise<AsyncIterator<Int>>;
  corrections: () => Promise<AsyncIterator<Int>>;
  account: <T = AccountSubscription>() => T;
}

export interface TestNullablePromise
  extends Promise<Test | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  cpm: () => Promise<Int>;
  rawCpm: () => Promise<Int>;
  wpm: () => Promise<Int>;
  correct: () => Promise<Int>;
  incorrect: () => Promise<Int>;
  corrections: () => Promise<Int>;
  account: <T = AccountPromise>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AggregateTest {
  count: Int;
}

export interface AggregateTestPromise
  extends Promise<AggregateTest>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTestSubscription
  extends Promise<AsyncIterator<AggregateTest>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Race {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  raceState: RaceState;
  wordSet: String;
}

export interface RacePromise extends Promise<Race>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  players: <T = FragmentableArray<Account>>(args?: {
    where?: AccountWhereInput;
    orderBy?: AccountOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  raceState: () => Promise<RaceState>;
  room: <T = RoomPromise>() => T;
  wordSet: () => Promise<String>;
}

export interface RaceSubscription
  extends Promise<AsyncIterator<Race>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  players: <T = Promise<AsyncIterator<AccountSubscription>>>(args?: {
    where?: AccountWhereInput;
    orderBy?: AccountOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  raceState: () => Promise<AsyncIterator<RaceState>>;
  room: <T = RoomSubscription>() => T;
  wordSet: () => Promise<AsyncIterator<String>>;
}

export interface RaceNullablePromise
  extends Promise<Race | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  players: <T = FragmentableArray<Account>>(args?: {
    where?: AccountWhereInput;
    orderBy?: AccountOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  raceState: () => Promise<RaceState>;
  room: <T = RoomPromise>() => T;
  wordSet: () => Promise<String>;
}

export interface TestConnection {
  pageInfo: PageInfo;
  edges: TestEdge[];
}

export interface TestConnectionPromise
  extends Promise<TestConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TestEdge>>() => T;
  aggregate: <T = AggregateTestPromise>() => T;
}

export interface TestConnectionSubscription
  extends Promise<AsyncIterator<TestConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TestEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTestSubscription>() => T;
}

export interface AggregateAccount {
  count: Int;
}

export interface AggregateAccountPromise
  extends Promise<AggregateAccount>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAccountSubscription
  extends Promise<AsyncIterator<AggregateAccount>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface RoomEdge {
  node: Room;
  cursor: String;
}

export interface RoomEdgePromise extends Promise<RoomEdge>, Fragmentable {
  node: <T = RoomPromise>() => T;
  cursor: () => Promise<String>;
}

export interface RoomEdgeSubscription
  extends Promise<AsyncIterator<RoomEdge>>,
    Fragmentable {
  node: <T = RoomSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AccountEdge {
  node: Account;
  cursor: String;
}

export interface AccountEdgePromise extends Promise<AccountEdge>, Fragmentable {
  node: <T = AccountPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AccountEdgeSubscription
  extends Promise<AsyncIterator<AccountEdge>>,
    Fragmentable {
  node: <T = AccountSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Account {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  email: String;
  username: String;
  password: String;
  role: Role;
}

export interface AccountPromise extends Promise<Account>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  username: () => Promise<String>;
  password: () => Promise<String>;
  results: <T = FragmentableArray<Test>>(args?: {
    where?: TestWhereInput;
    orderBy?: TestOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  role: () => Promise<Role>;
}

export interface AccountSubscription
  extends Promise<AsyncIterator<Account>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  results: <T = Promise<AsyncIterator<TestSubscription>>>(args?: {
    where?: TestWhereInput;
    orderBy?: TestOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  role: () => Promise<AsyncIterator<Role>>;
}

export interface AccountNullablePromise
  extends Promise<Account | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  username: () => Promise<String>;
  password: () => Promise<String>;
  results: <T = FragmentableArray<Test>>(args?: {
    where?: TestWhereInput;
    orderBy?: TestOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  role: () => Promise<Role>;
}

export interface RoomPreviousValues {
  id: ID_Output;
  createdAt?: DateTimeOutput;
  updatedAt?: DateTimeOutput;
  roomState: RoomState;
  roomHost?: ID_Output;
}

export interface RoomPreviousValuesPromise
  extends Promise<RoomPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  roomState: () => Promise<RoomState>;
  roomHost: () => Promise<ID_Output>;
}

export interface RoomPreviousValuesSubscription
  extends Promise<AsyncIterator<RoomPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  roomState: () => Promise<AsyncIterator<RoomState>>;
  roomHost: () => Promise<AsyncIterator<ID_Output>>;
}

export interface RaceEdge {
  node: Race;
  cursor: String;
}

export interface RaceEdgePromise extends Promise<RaceEdge>, Fragmentable {
  node: <T = RacePromise>() => T;
  cursor: () => Promise<String>;
}

export interface RaceEdgeSubscription
  extends Promise<AsyncIterator<RaceEdge>>,
    Fragmentable {
  node: <T = RaceSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AccountSubscriptionPayload {
  mutation: MutationType;
  node: Account;
  updatedFields: String[];
  previousValues: AccountPreviousValues;
}

export interface AccountSubscriptionPayloadPromise
  extends Promise<AccountSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AccountPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AccountPreviousValuesPromise>() => T;
}

export interface AccountSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AccountSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AccountSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AccountPreviousValuesSubscription>() => T;
}

export interface TestSubscriptionPayload {
  mutation: MutationType;
  node: Test;
  updatedFields: String[];
  previousValues: TestPreviousValues;
}

export interface TestSubscriptionPayloadPromise
  extends Promise<TestSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TestPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TestPreviousValuesPromise>() => T;
}

export interface TestSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TestSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TestSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TestPreviousValuesSubscription>() => T;
}

export interface AggregateRoom {
  count: Int;
}

export interface AggregateRoomPromise
  extends Promise<AggregateRoom>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRoomSubscription
  extends Promise<AsyncIterator<AggregateRoom>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface RacePreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  raceState: RaceState;
  wordSet: String;
}

export interface RacePreviousValuesPromise
  extends Promise<RacePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  raceState: () => Promise<RaceState>;
  wordSet: () => Promise<String>;
}

export interface RacePreviousValuesSubscription
  extends Promise<AsyncIterator<RacePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  raceState: () => Promise<AsyncIterator<RaceState>>;
  wordSet: () => Promise<AsyncIterator<String>>;
}

export interface RaceSubscriptionPayload {
  mutation: MutationType;
  node: Race;
  updatedFields: String[];
  previousValues: RacePreviousValues;
}

export interface RaceSubscriptionPayloadPromise
  extends Promise<RaceSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RacePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RacePreviousValuesPromise>() => T;
}

export interface RaceSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RaceSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RaceSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RacePreviousValuesSubscription>() => T;
}

export interface RoomSubscriptionPayload {
  mutation: MutationType;
  node: Room;
  updatedFields: String[];
  previousValues: RoomPreviousValues;
}

export interface RoomSubscriptionPayloadPromise
  extends Promise<RoomSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RoomPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RoomPreviousValuesPromise>() => T;
}

export interface RoomSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RoomSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RoomSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RoomPreviousValuesSubscription>() => T;
}

export interface AccountPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  email: String;
  username: String;
  password: String;
  role: Role;
}

export interface AccountPreviousValuesPromise
  extends Promise<AccountPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  username: () => Promise<String>;
  password: () => Promise<String>;
  role: () => Promise<Role>;
}

export interface AccountPreviousValuesSubscription
  extends Promise<AsyncIterator<AccountPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<Role>>;
}

export interface RoomConnection {
  pageInfo: PageInfo;
  edges: RoomEdge[];
}

export interface RoomConnectionPromise
  extends Promise<RoomConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RoomEdge>>() => T;
  aggregate: <T = AggregateRoomPromise>() => T;
}

export interface RoomConnectionSubscription
  extends Promise<AsyncIterator<RoomConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RoomEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRoomSubscription>() => T;
}

export interface TestEdge {
  node: Test;
  cursor: String;
}

export interface TestEdgePromise extends Promise<TestEdge>, Fragmentable {
  node: <T = TestPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TestEdgeSubscription
  extends Promise<AsyncIterator<TestEdge>>,
    Fragmentable {
  node: <T = TestSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface RaceConnection {
  pageInfo: PageInfo;
  edges: RaceEdge[];
}

export interface RaceConnectionPromise
  extends Promise<RaceConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RaceEdge>>() => T;
  aggregate: <T = AggregateRacePromise>() => T;
}

export interface RaceConnectionSubscription
  extends Promise<AsyncIterator<RaceConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RaceEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRaceSubscription>() => T;
}

export interface AggregateRace {
  count: Int;
}

export interface AggregateRacePromise
  extends Promise<AggregateRace>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRaceSubscription
  extends Promise<AsyncIterator<AggregateRace>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Account",
    embedded: false
  },
  {
    name: "Test",
    embedded: false
  },
  {
    name: "Race",
    embedded: false
  },
  {
    name: "Room",
    embedded: false
  },
  {
    name: "Role",
    embedded: false
  },
  {
    name: "RoomState",
    embedded: false
  },
  {
    name: "RaceState",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466`,
  secret: `${process.env["PRISMA_SECRET"]}`
});
export const prisma = new Prisma();
