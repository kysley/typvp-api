// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  account: (where?: AccountWhereInput) => Promise<boolean>;
  test: (where?: TestWhereInput) => Promise<boolean>;
  trial: (where?: TrialWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  account: (where: AccountWhereUniqueInput) => AccountNullablePromise;
  accounts: (args?: {
    where?: AccountWhereInput;
    orderBy?: AccountOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Account>;
  accountsConnection: (args?: {
    where?: AccountWhereInput;
    orderBy?: AccountOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AccountConnectionPromise;
  test: (where: TestWhereUniqueInput) => TestNullablePromise;
  tests: (args?: {
    where?: TestWhereInput;
    orderBy?: TestOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Test>;
  testsConnection: (args?: {
    where?: TestWhereInput;
    orderBy?: TestOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TestConnectionPromise;
  trial: (where: TrialWhereUniqueInput) => TrialNullablePromise;
  trials: (args?: {
    where?: TrialWhereInput;
    orderBy?: TrialOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Trial>;
  trialsConnection: (args?: {
    where?: TrialWhereInput;
    orderBy?: TrialOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TrialConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAccount: (data: AccountCreateInput) => AccountPromise;
  updateAccount: (args: {
    data: AccountUpdateInput;
    where: AccountWhereUniqueInput;
  }) => AccountPromise;
  updateManyAccounts: (args: {
    data: AccountUpdateManyMutationInput;
    where?: AccountWhereInput;
  }) => BatchPayloadPromise;
  upsertAccount: (args: {
    where: AccountWhereUniqueInput;
    create: AccountCreateInput;
    update: AccountUpdateInput;
  }) => AccountPromise;
  deleteAccount: (where: AccountWhereUniqueInput) => AccountPromise;
  deleteManyAccounts: (where?: AccountWhereInput) => BatchPayloadPromise;
  createTest: (data: TestCreateInput) => TestPromise;
  updateTest: (args: {
    data: TestUpdateInput;
    where: TestWhereUniqueInput;
  }) => TestPromise;
  updateManyTests: (args: {
    data: TestUpdateManyMutationInput;
    where?: TestWhereInput;
  }) => BatchPayloadPromise;
  upsertTest: (args: {
    where: TestWhereUniqueInput;
    create: TestCreateInput;
    update: TestUpdateInput;
  }) => TestPromise;
  deleteTest: (where: TestWhereUniqueInput) => TestPromise;
  deleteManyTests: (where?: TestWhereInput) => BatchPayloadPromise;
  createTrial: (data: TrialCreateInput) => TrialPromise;
  updateTrial: (args: {
    data: TrialUpdateInput;
    where: TrialWhereUniqueInput;
  }) => TrialPromise;
  updateManyTrials: (args: {
    data: TrialUpdateManyMutationInput;
    where?: TrialWhereInput;
  }) => BatchPayloadPromise;
  upsertTrial: (args: {
    where: TrialWhereUniqueInput;
    create: TrialCreateInput;
    update: TrialUpdateInput;
  }) => TrialPromise;
  deleteTrial: (where: TrialWhereUniqueInput) => TrialPromise;
  deleteManyTrials: (where?: TrialWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  account: (
    where?: AccountSubscriptionWhereInput
  ) => AccountSubscriptionPayloadSubscription;
  test: (
    where?: TestSubscriptionWhereInput
  ) => TestSubscriptionPayloadSubscription;
  trial: (
    where?: TrialSubscriptionWhereInput
  ) => TrialSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type Role = "USER" | "ADMIN";

export type ResultType = "SINGLEPLAYER" | "RACE" | "TRIAL";

export type TestOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "cpm_ASC"
  | "cpm_DESC"
  | "rawCpm_ASC"
  | "rawCpm_DESC"
  | "wpm_ASC"
  | "wpm_DESC"
  | "correct_ASC"
  | "correct_DESC"
  | "incorrect_ASC"
  | "incorrect_DESC"
  | "corrections_ASC"
  | "corrections_DESC"
  | "wordIndex_ASC"
  | "wordIndex_DESC"
  | "type_ASC"
  | "type_DESC";

export type AccountOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "email_ASC"
  | "email_DESC"
  | "username_ASC"
  | "username_DESC"
  | "password_ASC"
  | "password_DESC"
  | "role_ASC"
  | "role_DESC"
  | "lastSeen_ASC"
  | "lastSeen_DESC"
  | "lastPlayed_ASC"
  | "lastPlayed_DESC";

export type Difficulty = "EASY" | "NORMAL" | "MEDIUM" | "HARD";

export type TrialOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "wordSet_ASC"
  | "wordSet_DESC"
  | "name_ASC"
  | "name_DESC"
  | "difficulty_ASC"
  | "difficulty_DESC"
  | "minWordLength_ASC"
  | "minWordLength_DESC"
  | "maxWordLength_ASC"
  | "maxWordLength_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type AccountWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
  username?: Maybe<String>;
}>;

export interface TestWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  cpm?: Maybe<Int>;
  cpm_not?: Maybe<Int>;
  cpm_in?: Maybe<Int[] | Int>;
  cpm_not_in?: Maybe<Int[] | Int>;
  cpm_lt?: Maybe<Int>;
  cpm_lte?: Maybe<Int>;
  cpm_gt?: Maybe<Int>;
  cpm_gte?: Maybe<Int>;
  rawCpm?: Maybe<Int>;
  rawCpm_not?: Maybe<Int>;
  rawCpm_in?: Maybe<Int[] | Int>;
  rawCpm_not_in?: Maybe<Int[] | Int>;
  rawCpm_lt?: Maybe<Int>;
  rawCpm_lte?: Maybe<Int>;
  rawCpm_gt?: Maybe<Int>;
  rawCpm_gte?: Maybe<Int>;
  wpm?: Maybe<Int>;
  wpm_not?: Maybe<Int>;
  wpm_in?: Maybe<Int[] | Int>;
  wpm_not_in?: Maybe<Int[] | Int>;
  wpm_lt?: Maybe<Int>;
  wpm_lte?: Maybe<Int>;
  wpm_gt?: Maybe<Int>;
  wpm_gte?: Maybe<Int>;
  correct?: Maybe<Int>;
  correct_not?: Maybe<Int>;
  correct_in?: Maybe<Int[] | Int>;
  correct_not_in?: Maybe<Int[] | Int>;
  correct_lt?: Maybe<Int>;
  correct_lte?: Maybe<Int>;
  correct_gt?: Maybe<Int>;
  correct_gte?: Maybe<Int>;
  incorrect?: Maybe<Int>;
  incorrect_not?: Maybe<Int>;
  incorrect_in?: Maybe<Int[] | Int>;
  incorrect_not_in?: Maybe<Int[] | Int>;
  incorrect_lt?: Maybe<Int>;
  incorrect_lte?: Maybe<Int>;
  incorrect_gt?: Maybe<Int>;
  incorrect_gte?: Maybe<Int>;
  corrections?: Maybe<Int>;
  corrections_not?: Maybe<Int>;
  corrections_in?: Maybe<Int[] | Int>;
  corrections_not_in?: Maybe<Int[] | Int>;
  corrections_lt?: Maybe<Int>;
  corrections_lte?: Maybe<Int>;
  corrections_gt?: Maybe<Int>;
  corrections_gte?: Maybe<Int>;
  wordIndex?: Maybe<Int>;
  wordIndex_not?: Maybe<Int>;
  wordIndex_in?: Maybe<Int[] | Int>;
  wordIndex_not_in?: Maybe<Int[] | Int>;
  wordIndex_lt?: Maybe<Int>;
  wordIndex_lte?: Maybe<Int>;
  wordIndex_gt?: Maybe<Int>;
  wordIndex_gte?: Maybe<Int>;
  account?: Maybe<AccountWhereInput>;
  type?: Maybe<ResultType>;
  type_not?: Maybe<ResultType>;
  type_in?: Maybe<ResultType[] | ResultType>;
  type_not_in?: Maybe<ResultType[] | ResultType>;
  AND?: Maybe<TestWhereInput[] | TestWhereInput>;
  OR?: Maybe<TestWhereInput[] | TestWhereInput>;
  NOT?: Maybe<TestWhereInput[] | TestWhereInput>;
}

export interface AccountWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  username?: Maybe<String>;
  username_not?: Maybe<String>;
  username_in?: Maybe<String[] | String>;
  username_not_in?: Maybe<String[] | String>;
  username_lt?: Maybe<String>;
  username_lte?: Maybe<String>;
  username_gt?: Maybe<String>;
  username_gte?: Maybe<String>;
  username_contains?: Maybe<String>;
  username_not_contains?: Maybe<String>;
  username_starts_with?: Maybe<String>;
  username_not_starts_with?: Maybe<String>;
  username_ends_with?: Maybe<String>;
  username_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  results_every?: Maybe<TestWhereInput>;
  results_some?: Maybe<TestWhereInput>;
  results_none?: Maybe<TestWhereInput>;
  role?: Maybe<Role>;
  role_not?: Maybe<Role>;
  role_in?: Maybe<Role[] | Role>;
  role_not_in?: Maybe<Role[] | Role>;
  lastSeen?: Maybe<Float>;
  lastSeen_not?: Maybe<Float>;
  lastSeen_in?: Maybe<Float[] | Float>;
  lastSeen_not_in?: Maybe<Float[] | Float>;
  lastSeen_lt?: Maybe<Float>;
  lastSeen_lte?: Maybe<Float>;
  lastSeen_gt?: Maybe<Float>;
  lastSeen_gte?: Maybe<Float>;
  lastPlayed?: Maybe<ResultType>;
  lastPlayed_not?: Maybe<ResultType>;
  lastPlayed_in?: Maybe<ResultType[] | ResultType>;
  lastPlayed_not_in?: Maybe<ResultType[] | ResultType>;
  AND?: Maybe<AccountWhereInput[] | AccountWhereInput>;
  OR?: Maybe<AccountWhereInput[] | AccountWhereInput>;
  NOT?: Maybe<AccountWhereInput[] | AccountWhereInput>;
}

export type TestWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type TrialWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface TrialWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  results_every?: Maybe<TestWhereInput>;
  results_some?: Maybe<TestWhereInput>;
  results_none?: Maybe<TestWhereInput>;
  wordSet?: Maybe<String>;
  wordSet_not?: Maybe<String>;
  wordSet_in?: Maybe<String[] | String>;
  wordSet_not_in?: Maybe<String[] | String>;
  wordSet_lt?: Maybe<String>;
  wordSet_lte?: Maybe<String>;
  wordSet_gt?: Maybe<String>;
  wordSet_gte?: Maybe<String>;
  wordSet_contains?: Maybe<String>;
  wordSet_not_contains?: Maybe<String>;
  wordSet_starts_with?: Maybe<String>;
  wordSet_not_starts_with?: Maybe<String>;
  wordSet_ends_with?: Maybe<String>;
  wordSet_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  difficulty?: Maybe<Difficulty>;
  difficulty_not?: Maybe<Difficulty>;
  difficulty_in?: Maybe<Difficulty[] | Difficulty>;
  difficulty_not_in?: Maybe<Difficulty[] | Difficulty>;
  minWordLength?: Maybe<Int>;
  minWordLength_not?: Maybe<Int>;
  minWordLength_in?: Maybe<Int[] | Int>;
  minWordLength_not_in?: Maybe<Int[] | Int>;
  minWordLength_lt?: Maybe<Int>;
  minWordLength_lte?: Maybe<Int>;
  minWordLength_gt?: Maybe<Int>;
  minWordLength_gte?: Maybe<Int>;
  maxWordLength?: Maybe<Int>;
  maxWordLength_not?: Maybe<Int>;
  maxWordLength_in?: Maybe<Int[] | Int>;
  maxWordLength_not_in?: Maybe<Int[] | Int>;
  maxWordLength_lt?: Maybe<Int>;
  maxWordLength_lte?: Maybe<Int>;
  maxWordLength_gt?: Maybe<Int>;
  maxWordLength_gte?: Maybe<Int>;
  AND?: Maybe<TrialWhereInput[] | TrialWhereInput>;
  OR?: Maybe<TrialWhereInput[] | TrialWhereInput>;
  NOT?: Maybe<TrialWhereInput[] | TrialWhereInput>;
}

export interface AccountCreateInput {
  id?: Maybe<ID_Input>;
  email: String;
  username: String;
  password: String;
  results?: Maybe<TestCreateManyWithoutAccountInput>;
  role: Role;
  lastSeen?: Maybe<Float>;
  lastPlayed?: Maybe<ResultType>;
}

export interface TestCreateManyWithoutAccountInput {
  create?: Maybe<
    TestCreateWithoutAccountInput[] | TestCreateWithoutAccountInput
  >;
  connect?: Maybe<TestWhereUniqueInput[] | TestWhereUniqueInput>;
}

export interface TestCreateWithoutAccountInput {
  id?: Maybe<ID_Input>;
  cpm: Int;
  rawCpm: Int;
  wpm: Int;
  correct: Int;
  incorrect: Int;
  corrections: Int;
  wordIndex: Int;
  type: ResultType;
}

export interface AccountUpdateInput {
  email?: Maybe<String>;
  username?: Maybe<String>;
  password?: Maybe<String>;
  results?: Maybe<TestUpdateManyWithoutAccountInput>;
  role?: Maybe<Role>;
  lastSeen?: Maybe<Float>;
  lastPlayed?: Maybe<ResultType>;
}

export interface TestUpdateManyWithoutAccountInput {
  create?: Maybe<
    TestCreateWithoutAccountInput[] | TestCreateWithoutAccountInput
  >;
  delete?: Maybe<TestWhereUniqueInput[] | TestWhereUniqueInput>;
  connect?: Maybe<TestWhereUniqueInput[] | TestWhereUniqueInput>;
  set?: Maybe<TestWhereUniqueInput[] | TestWhereUniqueInput>;
  disconnect?: Maybe<TestWhereUniqueInput[] | TestWhereUniqueInput>;
  update?: Maybe<
    | TestUpdateWithWhereUniqueWithoutAccountInput[]
    | TestUpdateWithWhereUniqueWithoutAccountInput
  >;
  upsert?: Maybe<
    | TestUpsertWithWhereUniqueWithoutAccountInput[]
    | TestUpsertWithWhereUniqueWithoutAccountInput
  >;
  deleteMany?: Maybe<TestScalarWhereInput[] | TestScalarWhereInput>;
  updateMany?: Maybe<
    TestUpdateManyWithWhereNestedInput[] | TestUpdateManyWithWhereNestedInput
  >;
}

export interface TestUpdateWithWhereUniqueWithoutAccountInput {
  where: TestWhereUniqueInput;
  data: TestUpdateWithoutAccountDataInput;
}

export interface TestUpdateWithoutAccountDataInput {
  cpm?: Maybe<Int>;
  rawCpm?: Maybe<Int>;
  wpm?: Maybe<Int>;
  correct?: Maybe<Int>;
  incorrect?: Maybe<Int>;
  corrections?: Maybe<Int>;
  wordIndex?: Maybe<Int>;
  type?: Maybe<ResultType>;
}

export interface TestUpsertWithWhereUniqueWithoutAccountInput {
  where: TestWhereUniqueInput;
  update: TestUpdateWithoutAccountDataInput;
  create: TestCreateWithoutAccountInput;
}

export interface TestScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  cpm?: Maybe<Int>;
  cpm_not?: Maybe<Int>;
  cpm_in?: Maybe<Int[] | Int>;
  cpm_not_in?: Maybe<Int[] | Int>;
  cpm_lt?: Maybe<Int>;
  cpm_lte?: Maybe<Int>;
  cpm_gt?: Maybe<Int>;
  cpm_gte?: Maybe<Int>;
  rawCpm?: Maybe<Int>;
  rawCpm_not?: Maybe<Int>;
  rawCpm_in?: Maybe<Int[] | Int>;
  rawCpm_not_in?: Maybe<Int[] | Int>;
  rawCpm_lt?: Maybe<Int>;
  rawCpm_lte?: Maybe<Int>;
  rawCpm_gt?: Maybe<Int>;
  rawCpm_gte?: Maybe<Int>;
  wpm?: Maybe<Int>;
  wpm_not?: Maybe<Int>;
  wpm_in?: Maybe<Int[] | Int>;
  wpm_not_in?: Maybe<Int[] | Int>;
  wpm_lt?: Maybe<Int>;
  wpm_lte?: Maybe<Int>;
  wpm_gt?: Maybe<Int>;
  wpm_gte?: Maybe<Int>;
  correct?: Maybe<Int>;
  correct_not?: Maybe<Int>;
  correct_in?: Maybe<Int[] | Int>;
  correct_not_in?: Maybe<Int[] | Int>;
  correct_lt?: Maybe<Int>;
  correct_lte?: Maybe<Int>;
  correct_gt?: Maybe<Int>;
  correct_gte?: Maybe<Int>;
  incorrect?: Maybe<Int>;
  incorrect_not?: Maybe<Int>;
  incorrect_in?: Maybe<Int[] | Int>;
  incorrect_not_in?: Maybe<Int[] | Int>;
  incorrect_lt?: Maybe<Int>;
  incorrect_lte?: Maybe<Int>;
  incorrect_gt?: Maybe<Int>;
  incorrect_gte?: Maybe<Int>;
  corrections?: Maybe<Int>;
  corrections_not?: Maybe<Int>;
  corrections_in?: Maybe<Int[] | Int>;
  corrections_not_in?: Maybe<Int[] | Int>;
  corrections_lt?: Maybe<Int>;
  corrections_lte?: Maybe<Int>;
  corrections_gt?: Maybe<Int>;
  corrections_gte?: Maybe<Int>;
  wordIndex?: Maybe<Int>;
  wordIndex_not?: Maybe<Int>;
  wordIndex_in?: Maybe<Int[] | Int>;
  wordIndex_not_in?: Maybe<Int[] | Int>;
  wordIndex_lt?: Maybe<Int>;
  wordIndex_lte?: Maybe<Int>;
  wordIndex_gt?: Maybe<Int>;
  wordIndex_gte?: Maybe<Int>;
  type?: Maybe<ResultType>;
  type_not?: Maybe<ResultType>;
  type_in?: Maybe<ResultType[] | ResultType>;
  type_not_in?: Maybe<ResultType[] | ResultType>;
  AND?: Maybe<TestScalarWhereInput[] | TestScalarWhereInput>;
  OR?: Maybe<TestScalarWhereInput[] | TestScalarWhereInput>;
  NOT?: Maybe<TestScalarWhereInput[] | TestScalarWhereInput>;
}

export interface TestUpdateManyWithWhereNestedInput {
  where: TestScalarWhereInput;
  data: TestUpdateManyDataInput;
}

export interface TestUpdateManyDataInput {
  cpm?: Maybe<Int>;
  rawCpm?: Maybe<Int>;
  wpm?: Maybe<Int>;
  correct?: Maybe<Int>;
  incorrect?: Maybe<Int>;
  corrections?: Maybe<Int>;
  wordIndex?: Maybe<Int>;
  type?: Maybe<ResultType>;
}

export interface AccountUpdateManyMutationInput {
  email?: Maybe<String>;
  username?: Maybe<String>;
  password?: Maybe<String>;
  role?: Maybe<Role>;
  lastSeen?: Maybe<Float>;
  lastPlayed?: Maybe<ResultType>;
}

export interface TestCreateInput {
  id?: Maybe<ID_Input>;
  cpm: Int;
  rawCpm: Int;
  wpm: Int;
  correct: Int;
  incorrect: Int;
  corrections: Int;
  wordIndex: Int;
  account: AccountCreateOneWithoutResultsInput;
  type: ResultType;
}

export interface AccountCreateOneWithoutResultsInput {
  create?: Maybe<AccountCreateWithoutResultsInput>;
  connect?: Maybe<AccountWhereUniqueInput>;
}

export interface AccountCreateWithoutResultsInput {
  id?: Maybe<ID_Input>;
  email: String;
  username: String;
  password: String;
  role: Role;
  lastSeen?: Maybe<Float>;
  lastPlayed?: Maybe<ResultType>;
}

export interface TestUpdateInput {
  cpm?: Maybe<Int>;
  rawCpm?: Maybe<Int>;
  wpm?: Maybe<Int>;
  correct?: Maybe<Int>;
  incorrect?: Maybe<Int>;
  corrections?: Maybe<Int>;
  wordIndex?: Maybe<Int>;
  account?: Maybe<AccountUpdateOneRequiredWithoutResultsInput>;
  type?: Maybe<ResultType>;
}

export interface AccountUpdateOneRequiredWithoutResultsInput {
  create?: Maybe<AccountCreateWithoutResultsInput>;
  update?: Maybe<AccountUpdateWithoutResultsDataInput>;
  upsert?: Maybe<AccountUpsertWithoutResultsInput>;
  connect?: Maybe<AccountWhereUniqueInput>;
}

export interface AccountUpdateWithoutResultsDataInput {
  email?: Maybe<String>;
  username?: Maybe<String>;
  password?: Maybe<String>;
  role?: Maybe<Role>;
  lastSeen?: Maybe<Float>;
  lastPlayed?: Maybe<ResultType>;
}

export interface AccountUpsertWithoutResultsInput {
  update: AccountUpdateWithoutResultsDataInput;
  create: AccountCreateWithoutResultsInput;
}

export interface TestUpdateManyMutationInput {
  cpm?: Maybe<Int>;
  rawCpm?: Maybe<Int>;
  wpm?: Maybe<Int>;
  correct?: Maybe<Int>;
  incorrect?: Maybe<Int>;
  corrections?: Maybe<Int>;
  wordIndex?: Maybe<Int>;
  type?: Maybe<ResultType>;
}

export interface TrialCreateInput {
  id?: Maybe<ID_Input>;
  results?: Maybe<TestCreateManyInput>;
  wordSet: String;
  name: String;
  difficulty?: Maybe<Difficulty>;
  minWordLength?: Maybe<Int>;
  maxWordLength?: Maybe<Int>;
}

export interface TestCreateManyInput {
  create?: Maybe<TestCreateInput[] | TestCreateInput>;
  connect?: Maybe<TestWhereUniqueInput[] | TestWhereUniqueInput>;
}

export interface TrialUpdateInput {
  results?: Maybe<TestUpdateManyInput>;
  wordSet?: Maybe<String>;
  name?: Maybe<String>;
  difficulty?: Maybe<Difficulty>;
  minWordLength?: Maybe<Int>;
  maxWordLength?: Maybe<Int>;
}

export interface TestUpdateManyInput {
  create?: Maybe<TestCreateInput[] | TestCreateInput>;
  update?: Maybe<
    | TestUpdateWithWhereUniqueNestedInput[]
    | TestUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | TestUpsertWithWhereUniqueNestedInput[]
    | TestUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<TestWhereUniqueInput[] | TestWhereUniqueInput>;
  connect?: Maybe<TestWhereUniqueInput[] | TestWhereUniqueInput>;
  set?: Maybe<TestWhereUniqueInput[] | TestWhereUniqueInput>;
  disconnect?: Maybe<TestWhereUniqueInput[] | TestWhereUniqueInput>;
  deleteMany?: Maybe<TestScalarWhereInput[] | TestScalarWhereInput>;
  updateMany?: Maybe<
    TestUpdateManyWithWhereNestedInput[] | TestUpdateManyWithWhereNestedInput
  >;
}

export interface TestUpdateWithWhereUniqueNestedInput {
  where: TestWhereUniqueInput;
  data: TestUpdateDataInput;
}

export interface TestUpdateDataInput {
  cpm?: Maybe<Int>;
  rawCpm?: Maybe<Int>;
  wpm?: Maybe<Int>;
  correct?: Maybe<Int>;
  incorrect?: Maybe<Int>;
  corrections?: Maybe<Int>;
  wordIndex?: Maybe<Int>;
  account?: Maybe<AccountUpdateOneRequiredWithoutResultsInput>;
  type?: Maybe<ResultType>;
}

export interface TestUpsertWithWhereUniqueNestedInput {
  where: TestWhereUniqueInput;
  update: TestUpdateDataInput;
  create: TestCreateInput;
}

export interface TrialUpdateManyMutationInput {
  wordSet?: Maybe<String>;
  name?: Maybe<String>;
  difficulty?: Maybe<Difficulty>;
  minWordLength?: Maybe<Int>;
  maxWordLength?: Maybe<Int>;
}

export interface AccountSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AccountWhereInput>;
  AND?: Maybe<AccountSubscriptionWhereInput[] | AccountSubscriptionWhereInput>;
  OR?: Maybe<AccountSubscriptionWhereInput[] | AccountSubscriptionWhereInput>;
  NOT?: Maybe<AccountSubscriptionWhereInput[] | AccountSubscriptionWhereInput>;
}

export interface TestSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TestWhereInput>;
  AND?: Maybe<TestSubscriptionWhereInput[] | TestSubscriptionWhereInput>;
  OR?: Maybe<TestSubscriptionWhereInput[] | TestSubscriptionWhereInput>;
  NOT?: Maybe<TestSubscriptionWhereInput[] | TestSubscriptionWhereInput>;
}

export interface TrialSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TrialWhereInput>;
  AND?: Maybe<TrialSubscriptionWhereInput[] | TrialSubscriptionWhereInput>;
  OR?: Maybe<TrialSubscriptionWhereInput[] | TrialSubscriptionWhereInput>;
  NOT?: Maybe<TrialSubscriptionWhereInput[] | TrialSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Account {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  email: String;
  username: String;
  password: String;
  role: Role;
  lastSeen?: Float;
  lastPlayed?: ResultType;
}

export interface AccountPromise extends Promise<Account>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  username: () => Promise<String>;
  password: () => Promise<String>;
  results: <T = FragmentableArray<Test>>(args?: {
    where?: TestWhereInput;
    orderBy?: TestOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  role: () => Promise<Role>;
  lastSeen: () => Promise<Float>;
  lastPlayed: () => Promise<ResultType>;
}

export interface AccountSubscription
  extends Promise<AsyncIterator<Account>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  results: <T = Promise<AsyncIterator<TestSubscription>>>(args?: {
    where?: TestWhereInput;
    orderBy?: TestOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  role: () => Promise<AsyncIterator<Role>>;
  lastSeen: () => Promise<AsyncIterator<Float>>;
  lastPlayed: () => Promise<AsyncIterator<ResultType>>;
}

export interface AccountNullablePromise
  extends Promise<Account | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  username: () => Promise<String>;
  password: () => Promise<String>;
  results: <T = FragmentableArray<Test>>(args?: {
    where?: TestWhereInput;
    orderBy?: TestOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  role: () => Promise<Role>;
  lastSeen: () => Promise<Float>;
  lastPlayed: () => Promise<ResultType>;
}

export interface Test {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  cpm: Int;
  rawCpm: Int;
  wpm: Int;
  correct: Int;
  incorrect: Int;
  corrections: Int;
  wordIndex: Int;
  type: ResultType;
}

export interface TestPromise extends Promise<Test>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  cpm: () => Promise<Int>;
  rawCpm: () => Promise<Int>;
  wpm: () => Promise<Int>;
  correct: () => Promise<Int>;
  incorrect: () => Promise<Int>;
  corrections: () => Promise<Int>;
  wordIndex: () => Promise<Int>;
  account: <T = AccountPromise>() => T;
  type: () => Promise<ResultType>;
}

export interface TestSubscription
  extends Promise<AsyncIterator<Test>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  cpm: () => Promise<AsyncIterator<Int>>;
  rawCpm: () => Promise<AsyncIterator<Int>>;
  wpm: () => Promise<AsyncIterator<Int>>;
  correct: () => Promise<AsyncIterator<Int>>;
  incorrect: () => Promise<AsyncIterator<Int>>;
  corrections: () => Promise<AsyncIterator<Int>>;
  wordIndex: () => Promise<AsyncIterator<Int>>;
  account: <T = AccountSubscription>() => T;
  type: () => Promise<AsyncIterator<ResultType>>;
}

export interface TestNullablePromise
  extends Promise<Test | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  cpm: () => Promise<Int>;
  rawCpm: () => Promise<Int>;
  wpm: () => Promise<Int>;
  correct: () => Promise<Int>;
  incorrect: () => Promise<Int>;
  corrections: () => Promise<Int>;
  wordIndex: () => Promise<Int>;
  account: <T = AccountPromise>() => T;
  type: () => Promise<ResultType>;
}

export interface AccountConnection {
  pageInfo: PageInfo;
  edges: AccountEdge[];
}

export interface AccountConnectionPromise
  extends Promise<AccountConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AccountEdge>>() => T;
  aggregate: <T = AggregateAccountPromise>() => T;
}

export interface AccountConnectionSubscription
  extends Promise<AsyncIterator<AccountConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AccountEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAccountSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AccountEdge {
  node: Account;
  cursor: String;
}

export interface AccountEdgePromise extends Promise<AccountEdge>, Fragmentable {
  node: <T = AccountPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AccountEdgeSubscription
  extends Promise<AsyncIterator<AccountEdge>>,
    Fragmentable {
  node: <T = AccountSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAccount {
  count: Int;
}

export interface AggregateAccountPromise
  extends Promise<AggregateAccount>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAccountSubscription
  extends Promise<AsyncIterator<AggregateAccount>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TestConnection {
  pageInfo: PageInfo;
  edges: TestEdge[];
}

export interface TestConnectionPromise
  extends Promise<TestConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TestEdge>>() => T;
  aggregate: <T = AggregateTestPromise>() => T;
}

export interface TestConnectionSubscription
  extends Promise<AsyncIterator<TestConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TestEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTestSubscription>() => T;
}

export interface TestEdge {
  node: Test;
  cursor: String;
}

export interface TestEdgePromise extends Promise<TestEdge>, Fragmentable {
  node: <T = TestPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TestEdgeSubscription
  extends Promise<AsyncIterator<TestEdge>>,
    Fragmentable {
  node: <T = TestSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTest {
  count: Int;
}

export interface AggregateTestPromise
  extends Promise<AggregateTest>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTestSubscription
  extends Promise<AsyncIterator<AggregateTest>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Trial {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  wordSet: String;
  name: String;
  difficulty?: Difficulty;
  minWordLength?: Int;
  maxWordLength?: Int;
}

export interface TrialPromise extends Promise<Trial>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  results: <T = FragmentableArray<Test>>(args?: {
    where?: TestWhereInput;
    orderBy?: TestOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  wordSet: () => Promise<String>;
  name: () => Promise<String>;
  difficulty: () => Promise<Difficulty>;
  minWordLength: () => Promise<Int>;
  maxWordLength: () => Promise<Int>;
}

export interface TrialSubscription
  extends Promise<AsyncIterator<Trial>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  results: <T = Promise<AsyncIterator<TestSubscription>>>(args?: {
    where?: TestWhereInput;
    orderBy?: TestOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  wordSet: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  difficulty: () => Promise<AsyncIterator<Difficulty>>;
  minWordLength: () => Promise<AsyncIterator<Int>>;
  maxWordLength: () => Promise<AsyncIterator<Int>>;
}

export interface TrialNullablePromise
  extends Promise<Trial | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  results: <T = FragmentableArray<Test>>(args?: {
    where?: TestWhereInput;
    orderBy?: TestOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  wordSet: () => Promise<String>;
  name: () => Promise<String>;
  difficulty: () => Promise<Difficulty>;
  minWordLength: () => Promise<Int>;
  maxWordLength: () => Promise<Int>;
}

export interface TrialConnection {
  pageInfo: PageInfo;
  edges: TrialEdge[];
}

export interface TrialConnectionPromise
  extends Promise<TrialConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TrialEdge>>() => T;
  aggregate: <T = AggregateTrialPromise>() => T;
}

export interface TrialConnectionSubscription
  extends Promise<AsyncIterator<TrialConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TrialEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTrialSubscription>() => T;
}

export interface TrialEdge {
  node: Trial;
  cursor: String;
}

export interface TrialEdgePromise extends Promise<TrialEdge>, Fragmentable {
  node: <T = TrialPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TrialEdgeSubscription
  extends Promise<AsyncIterator<TrialEdge>>,
    Fragmentable {
  node: <T = TrialSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTrial {
  count: Int;
}

export interface AggregateTrialPromise
  extends Promise<AggregateTrial>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTrialSubscription
  extends Promise<AsyncIterator<AggregateTrial>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AccountSubscriptionPayload {
  mutation: MutationType;
  node: Account;
  updatedFields: String[];
  previousValues: AccountPreviousValues;
}

export interface AccountSubscriptionPayloadPromise
  extends Promise<AccountSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AccountPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AccountPreviousValuesPromise>() => T;
}

export interface AccountSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AccountSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AccountSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AccountPreviousValuesSubscription>() => T;
}

export interface AccountPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  email: String;
  username: String;
  password: String;
  role: Role;
  lastSeen?: Float;
  lastPlayed?: ResultType;
}

export interface AccountPreviousValuesPromise
  extends Promise<AccountPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  username: () => Promise<String>;
  password: () => Promise<String>;
  role: () => Promise<Role>;
  lastSeen: () => Promise<Float>;
  lastPlayed: () => Promise<ResultType>;
}

export interface AccountPreviousValuesSubscription
  extends Promise<AsyncIterator<AccountPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<Role>>;
  lastSeen: () => Promise<AsyncIterator<Float>>;
  lastPlayed: () => Promise<AsyncIterator<ResultType>>;
}

export interface TestSubscriptionPayload {
  mutation: MutationType;
  node: Test;
  updatedFields: String[];
  previousValues: TestPreviousValues;
}

export interface TestSubscriptionPayloadPromise
  extends Promise<TestSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TestPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TestPreviousValuesPromise>() => T;
}

export interface TestSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TestSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TestSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TestPreviousValuesSubscription>() => T;
}

export interface TestPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  cpm: Int;
  rawCpm: Int;
  wpm: Int;
  correct: Int;
  incorrect: Int;
  corrections: Int;
  wordIndex: Int;
  type: ResultType;
}

export interface TestPreviousValuesPromise
  extends Promise<TestPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  cpm: () => Promise<Int>;
  rawCpm: () => Promise<Int>;
  wpm: () => Promise<Int>;
  correct: () => Promise<Int>;
  incorrect: () => Promise<Int>;
  corrections: () => Promise<Int>;
  wordIndex: () => Promise<Int>;
  type: () => Promise<ResultType>;
}

export interface TestPreviousValuesSubscription
  extends Promise<AsyncIterator<TestPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  cpm: () => Promise<AsyncIterator<Int>>;
  rawCpm: () => Promise<AsyncIterator<Int>>;
  wpm: () => Promise<AsyncIterator<Int>>;
  correct: () => Promise<AsyncIterator<Int>>;
  incorrect: () => Promise<AsyncIterator<Int>>;
  corrections: () => Promise<AsyncIterator<Int>>;
  wordIndex: () => Promise<AsyncIterator<Int>>;
  type: () => Promise<AsyncIterator<ResultType>>;
}

export interface TrialSubscriptionPayload {
  mutation: MutationType;
  node: Trial;
  updatedFields: String[];
  previousValues: TrialPreviousValues;
}

export interface TrialSubscriptionPayloadPromise
  extends Promise<TrialSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TrialPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TrialPreviousValuesPromise>() => T;
}

export interface TrialSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TrialSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TrialSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TrialPreviousValuesSubscription>() => T;
}

export interface TrialPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  wordSet: String;
  name: String;
  difficulty?: Difficulty;
  minWordLength?: Int;
  maxWordLength?: Int;
}

export interface TrialPreviousValuesPromise
  extends Promise<TrialPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  wordSet: () => Promise<String>;
  name: () => Promise<String>;
  difficulty: () => Promise<Difficulty>;
  minWordLength: () => Promise<Int>;
  maxWordLength: () => Promise<Int>;
}

export interface TrialPreviousValuesSubscription
  extends Promise<AsyncIterator<TrialPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  wordSet: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  difficulty: () => Promise<AsyncIterator<Difficulty>>;
  minWordLength: () => Promise<AsyncIterator<Int>>;
  maxWordLength: () => Promise<AsyncIterator<Int>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Account",
    embedded: false
  },
  {
    name: "Test",
    embedded: false
  },
  {
    name: "Trial",
    embedded: false
  },
  {
    name: "ResultType",
    embedded: false
  },
  {
    name: "Difficulty",
    embedded: false
  },
  {
    name: "Role",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466`,
  secret: `${process.env["PRISMA_SECRET"]}`
});
export const prisma = new Prisma();
