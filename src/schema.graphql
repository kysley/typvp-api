type Query {
  account(id: ID!): Account!
  me: Account!
  leaderboard: [Test!]!
}

type Mutation {
  # Auth/Account
  signup(
    email: String!
    password: String!
    username: String!
  ): AuthPayload!
  login(username: String!, password: String!): AuthPayload!
  # createAccount(email: String!, password: String!, role: Role!): Account!
  # deleteAccount(id: ID!): Account!

  # Singleplayer Typing Test
  addResults(cpm: Int!, rawCpm: Int!, wpm: Int!, correct: Int!, incorrect: Int!, corrections: Int!): Test!

  # Trail Typing Test
  completeTrail(trailId: ID!, cpm: Int!, rawCpm: Int!, wpm: Int!, correct: Int!, incorrect: Int!, corrections: Int!): Test!
}

type AuthPayload {
  token: String!
  account: Account!
}

type Account {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  email: String!
  username: String!
  role: Role!
  results: [Test!]!
}

type Test {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  cpm: Int!
  rawCpm: Int!
  wpm: Int!
  correct: Int!
  incorrect: Int!
  corrections: Int!
  account: Account!
}

type Trail {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  results: [Test!]
  wordSet: String!
  name: String!
  difficulty: Difficulty
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum Role {
  USER
  ADMIN
}

scalar DateTime
