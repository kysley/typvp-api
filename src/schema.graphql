type Query {
  account(id: ID!): Account!
  me: Account!
  leaderboard: [Test!]!
}

type Mutation {
  # Auth/Account
  signup(email: String!, password: String!, username: String!): AuthPayload!
  login(username: String!, password: String!): AuthPayload!
  # createAccount(email: String!, password: String!, role: Role!): Account!
  # deleteAccount(id: ID!): Account!

  # Singleplayer Typing Test
  addResults(
    cpm: Int!
    rawCpm: Int!
    wpm: Int!
    correct: Int!
    incorrect: Int!
    corrections: Int!
  ): Test!

  # Races
  joinRace: Test
  startRace: Race

  # Rooms
  createRoom: Room
  joinRoom: Room
  quickMatch: Room
}

type Subscription {
  races: Race
  rooms: Room
}

type AuthPayload {
  token: String!
  account: Account!
}

type Account {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  email: String!
  username: String!
  role: Role!
  results: [Test!]!
}

type Test {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  cpm: Int!
  rawCpm: Int!
  wpm: Int!
  correct: Int!
  incorrect: Int!
  corrections: Int!
  account: Account!
}

type Race {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  # leader: Account! @relation(name: "RaceLeader")
  players: [Account!]!
  raceState: RaceState!
  room: Room!
  wordSet: String!
}

type Room {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  roomState: RoomState!
  race: Race!
  roomHost: ID
}

enum RoomState {
  IDLE
  FULL
  AWAITING
  BUSY
}

enum RaceState {
  IN_PROGRESS
  AWAITING
  COUNTDOWN
  FINISHED
}

enum Role {
  USER
  ADMIN
}

scalar DateTime
